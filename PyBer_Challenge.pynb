{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pyber Challenge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 Loading and Reading CSV files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add Matplotlib inline magic command\n",
    "%matplotlib inline\n",
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load (Remember to change these)\n",
    "BaseLocation = r'C:\\Users\\helpdesk\\Documents\\Data Analytics Bootcamp\\Modules\\Module 5'\n",
    "citydata = r'\\city_data.csv'\n",
    "ridedata = r'\\ride_data.csv'\n",
    "imagename = r'\\PyBer_fare_summary.png'\n",
    "\n",
    "city_data_to_load = f'{BaseLocation}{citydata}'\n",
    "ride_data_to_load = f'{BaseLocation}{ridedata}'\n",
    "image_to_save = f'{BaseLocation}{imagename}'\n",
    "\n",
    "# Read the City and Ride Data\n",
    "city_data_df = pd.read_csv(city_data_to_load)\n",
    "ride_data_df = pd.read_csv(ride_data_to_load)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge the DataFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lake Jonathanshire</td>\n",
       "      <td>2019-01-14 10:14:22</td>\n",
       "      <td>13.83</td>\n",
       "      <td>5739410935873</td>\n",
       "      <td>5</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Michelleport</td>\n",
       "      <td>2019-03-04 18:24:09</td>\n",
       "      <td>30.24</td>\n",
       "      <td>2343912425577</td>\n",
       "      <td>72</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Port Samanthamouth</td>\n",
       "      <td>2019-02-24 04:29:00</td>\n",
       "      <td>33.44</td>\n",
       "      <td>2005065760003</td>\n",
       "      <td>57</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rodneyfort</td>\n",
       "      <td>2019-02-10 23:22:03</td>\n",
       "      <td>23.44</td>\n",
       "      <td>5149245426178</td>\n",
       "      <td>34</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Jack</td>\n",
       "      <td>2019-03-06 04:28:35</td>\n",
       "      <td>34.58</td>\n",
       "      <td>3908451377344</td>\n",
       "      <td>46</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city                 date   fare        ride_id  \\\n",
       "0  Lake Jonathanshire  2019-01-14 10:14:22  13.83  5739410935873   \n",
       "1  South Michelleport  2019-03-04 18:24:09  30.24  2343912425577   \n",
       "2  Port Samanthamouth  2019-02-24 04:29:00  33.44  2005065760003   \n",
       "3          Rodneyfort  2019-02-10 23:22:03  23.44  5149245426178   \n",
       "4          South Jack  2019-03-06 04:28:35  34.58  3908451377344   \n",
       "\n",
       "   driver_count   type  \n",
       "0             5  Urban  \n",
       "1            72  Urban  \n",
       "2            57  Urban  \n",
       "3            34  Urban  \n",
       "4            46  Urban  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine the data into a single dataset\n",
    "pyber_data_df = pd.merge(ride_data_df, city_data_df, how=\"left\", on=[\"city\"])\n",
    "\n",
    "# Display the data table for preview\n",
    "pyber_data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deliverable 1: Get a Summary DataFrame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city\n",
      "date\n",
      "fare\n",
      "ride_id\n",
      "driver_count\n",
      "type\n"
     ]
    }
   ],
   "source": [
    "for col in pyber_data_df:\n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "city             object\n",
       "date             object\n",
       "fare            float64\n",
       "ride_id           int64\n",
       "driver_count      int64\n",
       "type             object\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pyber_data_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Rides</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>1625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Rides\n",
       "0     Rural          125\n",
       "1  Suburban          625\n",
       "2     Urban         1625"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  1. Get the total rides for each city type\n",
    "total_rides = 0\n",
    "total_rides = pyber_data_df.groupby(['type']).count().rename(columns={'ride_id':'Total Rides'})['Total Rides'].reset_index()\n",
    "total_rides"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Drivers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2405</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Drivers\n",
       "0     Rural             78\n",
       "1  Suburban            490\n",
       "2     Urban           2405"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Get the total drivers for each city type\n",
    "### city_data is used here to pull driver count \n",
    "total_drivers = 0\n",
    "total_drivers = city_data_df.groupby(['type']).sum().rename(columns={'driver_count':'Total Drivers'})['Total Drivers'].reset_index()\n",
    "total_drivers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Fares</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>4327.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>19356.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>39854.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Fares\n",
       "0     Rural      4327.93\n",
       "1  Suburban     19356.33\n",
       "2     Urban     39854.38"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  3. Get the total amount of fares for each city type\n",
    "total_fare = 0\n",
    "total_fare = pyber_data_df.groupby('type').sum('fare').rename(columns={'fare':'Total Fares'})['Total Fares'].reset_index()\n",
    "total_fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Average Fare per Ride</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>34.623440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>30.970128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>24.525772</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Average Fare per Ride\n",
       "0     Rural              34.623440\n",
       "1  Suburban              30.970128\n",
       "2     Urban              24.525772"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  4. Get the average fare per ride for each city type. \n",
    "avg_fare = 0\n",
    "avg_fare = pyber_data_df.groupby(['type']).mean(['fare']).rename(columns={'fare':'Average Fare per Ride'})['Average Fare per Ride'].reset_index()\n",
    "avg_fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. Get the average fare per driver for each city type. \n",
    "####done below in 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Rides</th>\n",
       "      <th>Total Drivers</th>\n",
       "      <th>Total Fares</th>\n",
       "      <th>Average Fare per Ride</th>\n",
       "      <th>Average Fare per Driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>125</td>\n",
       "      <td>78</td>\n",
       "      <td>4327.93</td>\n",
       "      <td>34.623440</td>\n",
       "      <td>55.486282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>625</td>\n",
       "      <td>490</td>\n",
       "      <td>19356.33</td>\n",
       "      <td>30.970128</td>\n",
       "      <td>39.502714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>1625</td>\n",
       "      <td>2405</td>\n",
       "      <td>39854.38</td>\n",
       "      <td>24.525772</td>\n",
       "      <td>16.571468</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Rides  Total Drivers  Total Fares  Average Fare per Ride  \\\n",
       "0     Rural          125             78      4327.93              34.623440   \n",
       "1  Suburban          625            490     19356.33              30.970128   \n",
       "2     Urban         1625           2405     39854.38              24.525772   \n",
       "\n",
       "   Average Fare per Driver  \n",
       "0                55.486282  \n",
       "1                39.502714  \n",
       "2                16.571468  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  6. Create a PyBer summary DataFrame. \n",
    "pyber_summary_df = pd.merge(total_rides, total_drivers,how='left',on=['type'])\n",
    "pyber_summary_df = pd.merge(pyber_summary_df,total_fare,how='left',on=['type'])\n",
    "pyber_summary_df = pd.merge(pyber_summary_df,avg_fare,how='left',on=['type'])\n",
    "\n",
    "#5 5. Get the average fare per driver for each city type. \n",
    "pyber_summary_df['Average Fare per Driver'] = pyber_summary_df['Total Fares']/pyber_summary_df['Total Drivers']\n",
    "\n",
    "pyber_summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  7. Cleaning up the DataFrame. Delete the index name\n",
    "# pyber_summary_df.index.name = None\n",
    "### already reset the index above in the previous steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Rides</th>\n",
       "      <th>Total Drivers</th>\n",
       "      <th>Total Fares</th>\n",
       "      <th>Average Fare per Ride</th>\n",
       "      <th>Average Fare per Driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>125</td>\n",
       "      <td>78</td>\n",
       "      <td>$4,327.93</td>\n",
       "      <td>$34.62</td>\n",
       "      <td>$55.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>625</td>\n",
       "      <td>490</td>\n",
       "      <td>$19,356.33</td>\n",
       "      <td>$30.97</td>\n",
       "      <td>$39.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>1,625</td>\n",
       "      <td>2,405</td>\n",
       "      <td>$39,854.38</td>\n",
       "      <td>$24.53</td>\n",
       "      <td>$16.57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type Total Rides Total Drivers Total Fares Average Fare per Ride  \\\n",
       "0     Rural         125            78   $4,327.93                $34.62   \n",
       "1  Suburban         625           490  $19,356.33                $30.97   \n",
       "2     Urban       1,625         2,405  $39,854.38                $24.53   \n",
       "\n",
       "  Average Fare per Driver  \n",
       "0                  $55.49  \n",
       "1                  $39.50  \n",
       "2                  $16.57  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  8. Format the columns.\n",
    "pyber_summary_df['Total Rides'] = pyber_summary_df['Total Rides'].map(\"{:,}\".format)\n",
    "pyber_summary_df['Total Drivers'] = pyber_summary_df['Total Drivers'].map(\"{:,}\".format)\n",
    "pyber_summary_df['Total Fares'] = pyber_summary_df['Total Fares'].map(\"${:,.2f}\".format)\n",
    "pyber_summary_df['Average Fare per Ride'] = pyber_summary_df['Average Fare per Ride'].map(\"${:,.2f}\".format)\n",
    "pyber_summary_df['Average Fare per Driver'] = pyber_summary_df['Average Fare per Driver'].map(\"${:,.2f}\".format)\n",
    "\n",
    "pyber_summary_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deliverable 2.  Create a multiple line plot that shows the total weekly of the fares for each type of city."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lake Jonathanshire</td>\n",
       "      <td>2019-01-14 10:14:22</td>\n",
       "      <td>13.83</td>\n",
       "      <td>5739410935873</td>\n",
       "      <td>5</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Michelleport</td>\n",
       "      <td>2019-03-04 18:24:09</td>\n",
       "      <td>30.24</td>\n",
       "      <td>2343912425577</td>\n",
       "      <td>72</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Port Samanthamouth</td>\n",
       "      <td>2019-02-24 04:29:00</td>\n",
       "      <td>33.44</td>\n",
       "      <td>2005065760003</td>\n",
       "      <td>57</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rodneyfort</td>\n",
       "      <td>2019-02-10 23:22:03</td>\n",
       "      <td>23.44</td>\n",
       "      <td>5149245426178</td>\n",
       "      <td>34</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Jack</td>\n",
       "      <td>2019-03-06 04:28:35</td>\n",
       "      <td>34.58</td>\n",
       "      <td>3908451377344</td>\n",
       "      <td>46</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city                 date   fare        ride_id  \\\n",
       "0  Lake Jonathanshire  2019-01-14 10:14:22  13.83  5739410935873   \n",
       "1  South Michelleport  2019-03-04 18:24:09  30.24  2343912425577   \n",
       "2  Port Samanthamouth  2019-02-24 04:29:00  33.44  2005065760003   \n",
       "3          Rodneyfort  2019-02-10 23:22:03  23.44  5149245426178   \n",
       "4          South Jack  2019-03-06 04:28:35  34.58  3908451377344   \n",
       "\n",
       "   driver_count   type  \n",
       "0             5  Urban  \n",
       "1            72  Urban  \n",
       "2            57  Urban  \n",
       "3            34  Urban  \n",
       "4            46  Urban  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1. Read the merged DataFrame\n",
    "pyber_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type   date               \n",
       "Rural  2019-01-01 09:45:36    43.69\n",
       "       2019-01-02 11:18:32    52.12\n",
       "       2019-01-03 19:51:01    19.90\n",
       "       2019-01-04 03:31:26    24.88\n",
       "       2019-01-06 07:38:40    47.33\n",
       "                              ...  \n",
       "Urban  2019-05-08 04:20:00    21.99\n",
       "       2019-05-08 04:39:49    18.45\n",
       "       2019-05-08 07:29:01    18.55\n",
       "       2019-05-08 11:38:35    19.77\n",
       "       2019-05-08 13:10:18    18.04\n",
       "Name: Total Fares, Length: 2375, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Using groupby() to create a new DataFrame showing the sum of the fares \n",
    "#  for each date where the indices are the city type and date.\n",
    "df = pyber_data_df.groupby(['type','date']).sum('fare').rename(columns={'fare':'Total Fares'})['Total Fares']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Total Fares</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-01 09:45:36</td>\n",
       "      <td>43.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-02 11:18:32</td>\n",
       "      <td>52.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-03 19:51:01</td>\n",
       "      <td>19.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-04 03:31:26</td>\n",
       "      <td>24.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-06 07:38:40</td>\n",
       "      <td>47.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2370</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 04:20:00</td>\n",
       "      <td>21.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2371</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 04:39:49</td>\n",
       "      <td>18.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2372</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 07:29:01</td>\n",
       "      <td>18.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 11:38:35</td>\n",
       "      <td>19.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2374</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 13:10:18</td>\n",
       "      <td>18.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2375 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       type                 date  Total Fares\n",
       "0     Rural  2019-01-01 09:45:36        43.69\n",
       "1     Rural  2019-01-02 11:18:32        52.12\n",
       "2     Rural  2019-01-03 19:51:01        19.90\n",
       "3     Rural  2019-01-04 03:31:26        24.88\n",
       "4     Rural  2019-01-06 07:38:40        47.33\n",
       "...     ...                  ...          ...\n",
       "2370  Urban  2019-05-08 04:20:00        21.99\n",
       "2371  Urban  2019-05-08 04:39:49        18.45\n",
       "2372  Urban  2019-05-08 07:29:01        18.55\n",
       "2373  Urban  2019-05-08 11:38:35        19.77\n",
       "2374  Urban  2019-05-08 13:10:18        18.04\n",
       "\n",
       "[2375 rows x 3 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3. Reset the index on the DataFrame you created in #1. This is needed to use the 'pivot()' function.\n",
    "# df = df.reset_index()\n",
    "df = df.reset_index()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01 00:08:16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-01 00:46:46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-01 02:07:24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-01 03:46:50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-01 05:23:21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2370</th>\n",
       "      <td>2019-05-08 04:20:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2371</th>\n",
       "      <td>2019-05-08 04:39:49</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2372</th>\n",
       "      <td>2019-05-08 07:29:01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373</th>\n",
       "      <td>2019-05-08 11:38:35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2374</th>\n",
       "      <td>2019-05-08 13:10:18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2375 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                 date  Rural  Suburban  Urban\n",
       "0     2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "1     2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2     2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "3     2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "4     2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                   ...    ...       ...    ...\n",
       "2370  2019-05-08 04:20:00    NaN       NaN  21.99\n",
       "2371  2019-05-08 04:39:49    NaN       NaN  18.45\n",
       "2372  2019-05-08 07:29:01    NaN       NaN  18.55\n",
       "2373  2019-05-08 11:38:35    NaN       NaN  19.77\n",
       "2374  2019-05-08 13:10:18    NaN       NaN  18.04\n",
       "\n",
       "[2375 rows x 4 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4. Create a pivot table with the 'date' as the index, the columns ='type', and values='fare' \n",
    "# to get the total fares for each type of city by the date. \n",
    "df = df.pivot('date','type','Total Fares').reset_index()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type\n",
       "date        datetime64[ns]\n",
       "Rural              float64\n",
       "Suburban           float64\n",
       "Urban              float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['date'] = pd.to_datetime(df['date'],format='%Y-%m-%d %H:%M:%S')\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01 00:08:16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-01 00:46:46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-01 02:07:24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-01 03:46:50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-01 05:23:21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2191</th>\n",
       "      <td>2019-04-28 14:28:36</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2192</th>\n",
       "      <td>2019-04-28 16:29:16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2193</th>\n",
       "      <td>2019-04-28 17:26:52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2194</th>\n",
       "      <td>2019-04-28 17:38:09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.87</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2195</th>\n",
       "      <td>2019-04-28 19:35:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16.96</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2196 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                date  Rural  Suburban  Urban\n",
       "0    2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "1    2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2    2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "3    2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "4    2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                  ...    ...       ...    ...\n",
       "2191 2019-04-28 14:28:36    NaN       NaN  11.46\n",
       "2192 2019-04-28 16:29:16    NaN       NaN  36.42\n",
       "2193 2019-04-28 17:26:52    NaN       NaN  31.43\n",
       "2194 2019-04-28 17:38:09    NaN     34.87    NaN\n",
       "2195 2019-04-28 19:35:03    NaN     16.96    NaN\n",
       "\n",
       "[2196 rows x 4 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5. Create a new DataFrame from the pivot table DataFrame using loc on the given dates, '2019-01-01':'2019-04-29'.\n",
    "## Did not use loc() method, as converting to date and using conditionals was more intuitive in this situation\n",
    "df = df[(df['date'] >= '2019-01-01') & (df['date'] < '2019-04-29')]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-01 00:08:16</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 00:46:46</th>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 02:07:24</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 03:46:50</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 05:23:21</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28 14:28:36</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28 16:29:16</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>36.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28 17:26:52</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28 17:38:09</th>\n",
       "      <td>NaN</td>\n",
       "      <td>34.87</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28 19:35:03</th>\n",
       "      <td>NaN</td>\n",
       "      <td>16.96</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2196 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                 Rural  Suburban  Urban\n",
       "date                                       \n",
       "2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                    ...       ...    ...\n",
       "2019-04-28 14:28:36    NaN       NaN  11.46\n",
       "2019-04-28 16:29:16    NaN       NaN  36.42\n",
       "2019-04-28 17:26:52    NaN       NaN  31.43\n",
       "2019-04-28 17:38:09    NaN     34.87    NaN\n",
       "2019-04-28 19:35:03    NaN     16.96    NaN\n",
       "\n",
       "[2196 rows x 3 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6. Set the \"date\" index to datetime datatype. This is necessary to use the resample() method in Step 8.\n",
    "# df.index = pd.to_datetime(df.index)\n",
    "df = df.set_index('date')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 2196 entries, 2019-01-01 00:08:16 to 2019-04-28 19:35:03\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Rural     114 non-null    float64\n",
      " 1   Suburban  573 non-null    float64\n",
      " 2   Urban     1509 non-null   float64\n",
      "dtypes: float64(3)\n",
      "memory usage: 68.6 KB\n"
     ]
    }
   ],
   "source": [
    "# 7. Check that the datatype for the index is datetime using df.info()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-06</th>\n",
       "      <td>187.92</td>\n",
       "      <td>721.60</td>\n",
       "      <td>1661.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-13</th>\n",
       "      <td>67.65</td>\n",
       "      <td>1105.13</td>\n",
       "      <td>2050.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-20</th>\n",
       "      <td>306.00</td>\n",
       "      <td>1218.20</td>\n",
       "      <td>1939.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-27</th>\n",
       "      <td>179.69</td>\n",
       "      <td>1203.28</td>\n",
       "      <td>2129.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>333.08</td>\n",
       "      <td>1042.79</td>\n",
       "      <td>2086.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-10</th>\n",
       "      <td>115.80</td>\n",
       "      <td>974.34</td>\n",
       "      <td>2162.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-17</th>\n",
       "      <td>95.82</td>\n",
       "      <td>1045.50</td>\n",
       "      <td>2235.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-24</th>\n",
       "      <td>419.06</td>\n",
       "      <td>1412.74</td>\n",
       "      <td>2466.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-03</th>\n",
       "      <td>175.14</td>\n",
       "      <td>858.46</td>\n",
       "      <td>2218.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-10</th>\n",
       "      <td>303.94</td>\n",
       "      <td>925.27</td>\n",
       "      <td>2470.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-17</th>\n",
       "      <td>163.39</td>\n",
       "      <td>906.20</td>\n",
       "      <td>2044.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-24</th>\n",
       "      <td>189.76</td>\n",
       "      <td>1122.20</td>\n",
       "      <td>2368.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-31</th>\n",
       "      <td>199.42</td>\n",
       "      <td>1045.06</td>\n",
       "      <td>1942.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-07</th>\n",
       "      <td>501.24</td>\n",
       "      <td>1010.73</td>\n",
       "      <td>2356.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-14</th>\n",
       "      <td>269.79</td>\n",
       "      <td>784.82</td>\n",
       "      <td>2390.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-21</th>\n",
       "      <td>214.14</td>\n",
       "      <td>1149.27</td>\n",
       "      <td>2303.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28</th>\n",
       "      <td>191.85</td>\n",
       "      <td>1357.75</td>\n",
       "      <td>2238.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "type         Rural  Suburban    Urban\n",
       "date                                 \n",
       "2019-01-06  187.92    721.60  1661.68\n",
       "2019-01-13   67.65   1105.13  2050.43\n",
       "2019-01-20  306.00   1218.20  1939.02\n",
       "2019-01-27  179.69   1203.28  2129.51\n",
       "2019-02-03  333.08   1042.79  2086.94\n",
       "2019-02-10  115.80    974.34  2162.64\n",
       "2019-02-17   95.82   1045.50  2235.07\n",
       "2019-02-24  419.06   1412.74  2466.29\n",
       "2019-03-03  175.14    858.46  2218.20\n",
       "2019-03-10  303.94    925.27  2470.93\n",
       "2019-03-17  163.39    906.20  2044.42\n",
       "2019-03-24  189.76   1122.20  2368.37\n",
       "2019-03-31  199.42   1045.06  1942.77\n",
       "2019-04-07  501.24   1010.73  2356.70\n",
       "2019-04-14  269.79    784.82  2390.72\n",
       "2019-04-21  214.14   1149.27  2303.80\n",
       "2019-04-28  191.85   1357.75  2238.29"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 8. Create a new DataFrame using the \"resample()\" function by week 'W' and get the sum of the fares for each week.\n",
    "df = df.resample('W').sum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdEAAAEuCAYAAADRByhXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAACK8UlEQVR4nO3dd3QUVRvA4d9sTS+kQSCh994RpPNRpKMYpIiIoqioIEUQsSFNQFEpil1QEEQFpQmCAtK7gBTpLQ0S0rbP98fCkskmpJDNptznnJwkd8re3U3m3bnlvVJCQoKMIAiCIAi5pnJ3BQRBEAShqBJBVBAEQRDySARRQRAEQcgjEUQFQRAEIY9EEBUEQRCEPBJBVBAEQRDySARRoUSYPn06AQEBbNu2zd1VKTDdu3cnICCACxcuuLsqOVYS3yehaBNBVMizgICAXH0tXbo0x+euW7cuAQEBrqt8Nu5czLP6ioyMdFvdihKz2cx3331HVFQUNWvWJDQ0lLJly9KiRQtGjx7Nnj17sj3HhQsXCAgIoHv37i6r550PHDn9GjlypMvqIhQtGndXQCi6JkyY4FT23XffcenSJR577DGnQFO3bt2Cqlq+adWqFQ8++KBTuYeHhxtqU7ScPXuWwYMHc/z4cQIDA2nXrh3ly5fHbDZz5swZfvjhB7788ktmzZrFiBEjABgxYgQPP/ww5cqVK9C6Dhw40Ol93r59Ozt27Mj0b6Ao/i0LriGCqJBnEydOdCrbvn07ly5dYuDAgbRu3doNtcpfDz74YKbPU7i32NhYevXqxeXLl3n66ad588038fb2VuyTkJDAxx9/zK1btxxlQUFBBAUFFXR1GTRokFPZ9OnT2bFjh/gbEO5JNOcKBeaXX36he/fuREZGEhYWRrNmzZg6dSpJSUmOfe403V26dAlQNhmnb87766+/ePHFF2nWrBkRERGULl2aFi1aMG3aNNLS0grsOeW2HneaiZcuXcq6devo2rUrERERlC9f3rGPwWDgo48+om3btpQtW5bw8HDatWvHF198gSznPkunLMt8/PHHNG3alLCwMGrXrs1rr72meN0tFgs1atQgIiKC5OTkTM8zdepUAgIC+PLLL7N9zKlTp3L58mX69OnDe++95xRAwf7eTp48mVGjRjnKMvaJLl26lPr16wOwY8cOxd/D9OnTOXHiBAEBAfTo0SPLunTt2pWAgABOnTqVbb2zM3ToUAICAti+fXum27du3UpAQADDhw93lN1pKj5//ny270N60dHRvPrqqzRq1IiwsDDKly9P3759+fPPP+/7eQj5R9yJCgXi7bffZu7cuQQGBtKvXz/8/f3ZsmULs2fPZu3ataxfvx4/Pz/8/f2ZMGECCxcu5NatW4om4/TNw/PmzePUqVM0b96cLl26YDAY2LVrF7NmzWLbtm2sWbMGjcb1f955rcfPP//MH3/8QefOnRk2bBjR0dEAJCUl0adPH/bv30+9evUYOHAgAJs3b2bMmDHs3buXhQsX5qqOEydOZOfOnfTt2xc/Pz9+//135s+fz65du1i7di16vR6NRsPQoUOZOXMmK1asYNiwYYpzWCwWlixZgq+vL/3797/n4xkMBpYvX+547Ozo9fost9WtW5dnn32WRYsWERER4Xg9wN5KULNmTVq1asX27ds5deoU1apVUxx//Phxdu3axYMPPui0LS+eeuopfvnlF7788stMm/m/+OILAKfXD3L2Ptxx7Ngx+vbtS2xsLB06dOChhx7ixo0b/Pbbb/Tp04cPP/yQIUOG3PfzEe6fCKKCy+3Zs4e5c+cSHh7O5s2bKVOmDABvvvkmI0eOZNmyZbz99tvMnj2bgIAAJk6cyHfffcetW7eyvAjPmTOH8uXLI0mSovxOsP7ll194+OGH77vu27dvZ/r06U7lDz/8MNWqVctzPTZt2sSKFSvo1KmTonzSpEns37+fN998k5dfftlRbjQaGTJkCN9//z09e/bkoYceyvFz2L17N9u2bSMiIgKAKVOmMGTIENauXcv8+fMZM2YMAE888QRz5szhiy++cAoCv/32G9evX2f48OH4+Pjc8/EOHDiAwWAgPDyc6tWr57iemalXrx7+/v4sWrSIyMjITP8enn76aXbs2MGXX37p9F7duWtOf2d4P1q3bk3NmjVZs2YNcXFxBAcHO7ZFR0ezbt06qlevnmmAzen7YLVaGTp0KImJiaxZs0ZxruvXr9OxY0fGjRtHly5dCA0NzZfnJeSdaM4VXG7JkiUAjBkzxhFAASRJ4u2338bT05Pvv/8es9mc43NWqFDBKXABvPDCCwD88ccf91lrux07djBz5kynrztNg3mtR7du3ZwC6M2bN/n++++pV6+eIoCC/W5typQpAI67vJx69tlnHRduALVa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Onz88cf3rEOJDaJJSUlERUWxbt06Nm/eTN26denfvz/x8fGK/WbNmsVDDz3E9u3b6devHy+88AIXL150U62Lns2bNzNixAiefvppdu3axccff8wvv/zidOFesGAB1apV488//2TixIm8/fbbrF692k21LpyGDBnC0qVLHb8vWbKEQYMGKfI/5/TveubMmXTu3Jm///6bp556qsCeQ0n1yy+/EBERQZ06dYiKimLZsmVOd5JvvPEGzzzzDNu2baNdu3YMHDiQq1evKvZ58803mTx5Mnv37qVJkyYF+RQKrfz4vxg6dCibNm3i+vXrjmO2bNlCdHQ0AwYMuOfjl9gg2rZtWwYMGED16tWpVq0as2bNwsPDg02bNin2i4qKIioqikqVKvHaa6+h0WjYuXOnm2pduG3atImyZcs6vh555BFmz57NqFGjGDx4MBUrVqRNmza8+eabfPnll8jy3SnKjRs3ZuzYsVSpUoVhw4YxYMAAFixY4MZnU/j079+fgwcP8t9//xEdHc3mzZsZOHCgYp+c/l337duXxx9/nAoVKlChQoUCfBYl0zfffOO4GD/44IN4enqydu1axT5PPvkkffv2pVq1asycOZOyZcs6rXc8YcIEOnToQIUKFQgODi6w+hdm+fF/0axZM6pVq8b333/vOGbJkiV069Yt29e5xGQsyig2NpZ3332Xbdu2ERsbi9VqJS0tjcuXLyv2q127tuNnjUZDUFAQsbGxBV3dIqFly5bMmzfP8buHhwdNmjThwIEDinKbzUZaWhrR0dGULl0agKZNmyrO1bRpU9asWVMwFS8iAgIC6NGjB0uWLMHf358HH3yQiIgIxT45/btu2LBhQVa9RDt79iy7d+/m888/B+yrST366KN8++239O7d27Ff+v8BlUpF48aN+ffffxXnEu+bs/z6v3j88cf5/PPPGT16NDdv3mTt2rUsWbIk28cvsUF05MiRxMTEMG3aNCIjI9Hr9fTq1cupr06r1Sp+lyRJcQcl3OXl5UWlSpUUZTabjQkTJtCnTx+n/cUn6dwbPHgwI0eOxNvbm0mTJjltz+nftbe3d0FVucT75ptvsFqt1KlTx1F25xqS8cNNdsT7lrn8+L8YMGAAb775Jjt37uTIkSMEBQXRoUOHbB+7xAbRXbt2MWPGDMdw85iYGKKjo91cq+Knfv36nDp1yim4ZrRv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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 8. Using the object-oriented interface method, plot the resample DataFrame using the df.plot() function. \n",
    "\n",
    "# Import the style from Matplotlib.\n",
    "from matplotlib import style\n",
    "import datetime as dt\n",
    "# Use the graph style fivethirtyeight.\n",
    "style.use('fivethirtyeight')\n",
    "\n",
    "df.plot()\n",
    "plt.title('Total Fare by City Type')\n",
    "plt.xlabel(None)\n",
    "plt.ylabel('Fare ($USD)')\n",
    "plt.xlim(dt.date(2019,1,1),dt.date(2019,4,29))\n",
    "plt.savefig(image_to_save, bbox_inches=\"tight\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "PythonData",
   "language": "python",
   "name": "pythondata"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
