{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pyber Challenge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 Loading and Reading CSV files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add Matplotlib inline magic command\n",
    "%matplotlib inline\n",
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "# File to Load (Remember to change these)\n",
    "BaseLocation = r'C:\\Users\\helpdesk\\Documents\\Data Analytics Bootcamp\\Modules\\Module 5'\n",
    "citydata = r'\\city_data.csv'\n",
    "ridedata = r'\\ride_data.csv'\n",
    "imagename = r'\\PyBer_fare_summary.png'\n",
    "\n",
    "city_data_to_load = f'{BaseLocation}{citydata}'\n",
    "ride_data_to_load = f'{BaseLocation}{ridedata}'\n",
    "image_to_save = f'{BaseLocation}{imagename}'\n",
    "\n",
    "# Read the City and Ride Data\n",
    "city_data_df = pd.read_csv(city_data_to_load)\n",
    "ride_data_df = pd.read_csv(ride_data_to_load)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge the DataFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lake Jonathanshire</td>\n",
       "      <td>2019-01-14 10:14:22</td>\n",
       "      <td>13.83</td>\n",
       "      <td>5739410935873</td>\n",
       "      <td>5</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Michelleport</td>\n",
       "      <td>2019-03-04 18:24:09</td>\n",
       "      <td>30.24</td>\n",
       "      <td>2343912425577</td>\n",
       "      <td>72</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Port Samanthamouth</td>\n",
       "      <td>2019-02-24 04:29:00</td>\n",
       "      <td>33.44</td>\n",
       "      <td>2005065760003</td>\n",
       "      <td>57</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rodneyfort</td>\n",
       "      <td>2019-02-10 23:22:03</td>\n",
       "      <td>23.44</td>\n",
       "      <td>5149245426178</td>\n",
       "      <td>34</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Jack</td>\n",
       "      <td>2019-03-06 04:28:35</td>\n",
       "      <td>34.58</td>\n",
       "      <td>3908451377344</td>\n",
       "      <td>46</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city                 date   fare        ride_id  \\\n",
       "0  Lake Jonathanshire  2019-01-14 10:14:22  13.83  5739410935873   \n",
       "1  South Michelleport  2019-03-04 18:24:09  30.24  2343912425577   \n",
       "2  Port Samanthamouth  2019-02-24 04:29:00  33.44  2005065760003   \n",
       "3          Rodneyfort  2019-02-10 23:22:03  23.44  5149245426178   \n",
       "4          South Jack  2019-03-06 04:28:35  34.58  3908451377344   \n",
       "\n",
       "   driver_count   type  \n",
       "0             5  Urban  \n",
       "1            72  Urban  \n",
       "2            57  Urban  \n",
       "3            34  Urban  \n",
       "4            46  Urban  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Combine the data into a single dataset\n",
    "pyber_data_df = pd.merge(ride_data_df, city_data_df, how=\"left\", on=[\"city\", \"city\"])\n",
    "\n",
    "# Display the data table for preview\n",
    "pyber_data_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deliverable 1: Get a Summary DataFrame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "city\n",
      "date\n",
      "fare\n",
      "ride_id\n",
      "driver_count\n",
      "type\n"
     ]
    }
   ],
   "source": [
    "for col in pyber_data_df:\n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Rides</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>1625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Rides\n",
       "0     Rural          125\n",
       "1  Suburban          625\n",
       "2     Urban         1625"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  1. Get the total rides for each city type\n",
    "total_rides = pyber_data_df.groupby(['type']).count().rename(columns={'ride_id':'Total Rides'})['Total Rides'].reset_index()\n",
    "total_rides"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Drivers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>8570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>59602</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Drivers\n",
       "0     Rural            537\n",
       "1  Suburban           8570\n",
       "2     Urban          59602"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Get the total drivers for each city type\n",
    "total_drivers = pyber_data_df.groupby(['type']).sum(['driver_count']).rename(columns={'driver_count':'Total Drivers'})['Total Drivers'].reset_index()\n",
    "total_drivers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Fares</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>4327.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>19356.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>39854.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Fares\n",
       "0     Rural      4327.93\n",
       "1  Suburban     19356.33\n",
       "2     Urban     39854.38"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  3. Get the total amount of fares for each city type\n",
    "total_fare = pyber_data_df.groupby('type').sum('fare').rename(columns={'fare':'Total Fares'})['Total Fares'].reset_index()\n",
    "total_fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Average Fare per Ride</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>34.623440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>30.970128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>24.525772</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Average Fare per Ride\n",
       "0     Rural              34.623440\n",
       "1  Suburban              30.970128\n",
       "2     Urban              24.525772"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  4. Get the average fare per ride for each city type. \n",
    "avg_fare = pyber_data_df.groupby(['type']).mean(['fare']).rename(columns={'fare':'Average Fare per Ride'})['Average Fare per Ride'].reset_index()\n",
    "avg_fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 5. Get the average fare per driver for each city type. \n",
    "####done below in 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>Total Rides</th>\n",
       "      <th>Total Drivers</th>\n",
       "      <th>Total Fares</th>\n",
       "      <th>Average Fare per Ride</th>\n",
       "      <th>Average Fare per Driver</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>125</td>\n",
       "      <td>537</td>\n",
       "      <td>4327.93</td>\n",
       "      <td>34.623440</td>\n",
       "      <td>8.059460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suburban</td>\n",
       "      <td>625</td>\n",
       "      <td>8570</td>\n",
       "      <td>19356.33</td>\n",
       "      <td>30.970128</td>\n",
       "      <td>2.258615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Urban</td>\n",
       "      <td>1625</td>\n",
       "      <td>59602</td>\n",
       "      <td>39854.38</td>\n",
       "      <td>24.525772</td>\n",
       "      <td>0.668675</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       type  Total Rides  Total Drivers  Total Fares  Average Fare per Ride  \\\n",
       "0     Rural          125            537      4327.93              34.623440   \n",
       "1  Suburban          625           8570     19356.33              30.970128   \n",
       "2     Urban         1625          59602     39854.38              24.525772   \n",
       "\n",
       "   Average Fare per Driver  \n",
       "0                 8.059460  \n",
       "1                 2.258615  \n",
       "2                 0.668675  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  6. Create a PyBer summary DataFrame. \n",
    "pyber_summary_df = pd.merge(total_rides, total_drivers,how='left',on=['type'])\n",
    "pyber_summary_df = pd.merge(pyber_summary_df,total_fare,how='left',on=['type'])\n",
    "pyber_summary_df = pd.merge(pyber_summary_df,avg_fare,how='left',on=['type'])\n",
    "\n",
    "#5 5. Get the average fare per driver for each city type. \n",
    "pyber_summary_df['Average Fare per Driver'] = pyber_summary_df['Total Fares']/pyber_summary_df['Total Drivers']\n",
    "\n",
    "pyber_summary_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  7. Cleaning up the DataFrame. Delete the index name\n",
    "# pyber_summary_df.index.name = None\n",
    "### already reset the index above in the previous steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  8. Format the columns.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deliverable 2.  Create a multiple line plot that shows the total weekly of the fares for each type of city."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>date</th>\n",
       "      <th>fare</th>\n",
       "      <th>ride_id</th>\n",
       "      <th>driver_count</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Lake Jonathanshire</td>\n",
       "      <td>2019-01-14 10:14:22</td>\n",
       "      <td>13.83</td>\n",
       "      <td>5739410935873</td>\n",
       "      <td>5</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>South Michelleport</td>\n",
       "      <td>2019-03-04 18:24:09</td>\n",
       "      <td>30.24</td>\n",
       "      <td>2343912425577</td>\n",
       "      <td>72</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Port Samanthamouth</td>\n",
       "      <td>2019-02-24 04:29:00</td>\n",
       "      <td>33.44</td>\n",
       "      <td>2005065760003</td>\n",
       "      <td>57</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rodneyfort</td>\n",
       "      <td>2019-02-10 23:22:03</td>\n",
       "      <td>23.44</td>\n",
       "      <td>5149245426178</td>\n",
       "      <td>34</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Jack</td>\n",
       "      <td>2019-03-06 04:28:35</td>\n",
       "      <td>34.58</td>\n",
       "      <td>3908451377344</td>\n",
       "      <td>46</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 city                 date   fare        ride_id  \\\n",
       "0  Lake Jonathanshire  2019-01-14 10:14:22  13.83  5739410935873   \n",
       "1  South Michelleport  2019-03-04 18:24:09  30.24  2343912425577   \n",
       "2  Port Samanthamouth  2019-02-24 04:29:00  33.44  2005065760003   \n",
       "3          Rodneyfort  2019-02-10 23:22:03  23.44  5149245426178   \n",
       "4          South Jack  2019-03-06 04:28:35  34.58  3908451377344   \n",
       "\n",
       "   driver_count   type  \n",
       "0             5  Urban  \n",
       "1            72  Urban  \n",
       "2            57  Urban  \n",
       "3            34  Urban  \n",
       "4            46  Urban  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1. Read the merged DataFrame\n",
    "pyber_data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type   date               \n",
       "Rural  2019-01-01 09:45:36    43.69\n",
       "       2019-01-02 11:18:32    52.12\n",
       "       2019-01-03 19:51:01    19.90\n",
       "       2019-01-04 03:31:26    24.88\n",
       "       2019-01-06 07:38:40    47.33\n",
       "                              ...  \n",
       "Urban  2019-05-08 04:20:00    21.99\n",
       "       2019-05-08 04:39:49    18.45\n",
       "       2019-05-08 07:29:01    18.55\n",
       "       2019-05-08 11:38:35    19.77\n",
       "       2019-05-08 13:10:18    18.04\n",
       "Name: Total Fares, Length: 2375, dtype: float64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Using groupby() to create a new DataFrame showing the sum of the fares \n",
    "#  for each date where the indices are the city type and date.\n",
    "df = pyber_data_df.groupby(['type','date']).sum('fare').rename(columns={'fare':'Total Fares'})['Total Fares']\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Total Fares</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-01 09:45:36</td>\n",
       "      <td>43.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-02 11:18:32</td>\n",
       "      <td>52.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-03 19:51:01</td>\n",
       "      <td>19.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-04 03:31:26</td>\n",
       "      <td>24.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Rural</td>\n",
       "      <td>2019-01-06 07:38:40</td>\n",
       "      <td>47.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2370</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 04:20:00</td>\n",
       "      <td>21.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2371</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 04:39:49</td>\n",
       "      <td>18.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2372</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 07:29:01</td>\n",
       "      <td>18.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 11:38:35</td>\n",
       "      <td>19.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2374</th>\n",
       "      <td>Urban</td>\n",
       "      <td>2019-05-08 13:10:18</td>\n",
       "      <td>18.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2375 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       type                 date  Total Fares\n",
       "0     Rural  2019-01-01 09:45:36        43.69\n",
       "1     Rural  2019-01-02 11:18:32        52.12\n",
       "2     Rural  2019-01-03 19:51:01        19.90\n",
       "3     Rural  2019-01-04 03:31:26        24.88\n",
       "4     Rural  2019-01-06 07:38:40        47.33\n",
       "...     ...                  ...          ...\n",
       "2370  Urban  2019-05-08 04:20:00        21.99\n",
       "2371  Urban  2019-05-08 04:39:49        18.45\n",
       "2372  Urban  2019-05-08 07:29:01        18.55\n",
       "2373  Urban  2019-05-08 11:38:35        19.77\n",
       "2374  Urban  2019-05-08 13:10:18        18.04\n",
       "\n",
       "[2375 rows x 3 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3. Reset the index on the DataFrame you created in #1. This is needed to use the 'pivot()' function.\n",
    "# df = df.reset_index()\n",
    "df = df.reset_index()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01 00:08:16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-01 00:46:46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-01 02:07:24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-01 03:46:50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-01 05:23:21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2370</th>\n",
       "      <td>2019-05-08 04:20:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2371</th>\n",
       "      <td>2019-05-08 04:39:49</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2372</th>\n",
       "      <td>2019-05-08 07:29:01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2373</th>\n",
       "      <td>2019-05-08 11:38:35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2374</th>\n",
       "      <td>2019-05-08 13:10:18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2375 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                 date  Rural  Suburban  Urban\n",
       "0     2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "1     2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2     2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "3     2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "4     2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                   ...    ...       ...    ...\n",
       "2370  2019-05-08 04:20:00    NaN       NaN  21.99\n",
       "2371  2019-05-08 04:39:49    NaN       NaN  18.45\n",
       "2372  2019-05-08 07:29:01    NaN       NaN  18.55\n",
       "2373  2019-05-08 11:38:35    NaN       NaN  19.77\n",
       "2374  2019-05-08 13:10:18    NaN       NaN  18.04\n",
       "\n",
       "[2375 rows x 4 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4. Create a pivot table with the 'date' as the index, the columns ='type', and values='fare' \n",
    "# to get the total fares for each type of city by the date. \n",
    "df = df.pivot('date','type','Total Fares').reset_index()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "type\n",
       "date        datetime64[ns]\n",
       "Rural              float64\n",
       "Suburban           float64\n",
       "Urban              float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['date'] = pd.to_datetime(df['date'],format='%Y-%m-%d %H:%M:%S')\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>date</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01 00:08:16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-01 00:46:46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-01 02:07:24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-01 03:46:50</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-01 05:23:21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2213</th>\n",
       "      <td>2019-04-29 20:54:19</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2214</th>\n",
       "      <td>2019-04-29 21:20:41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2215</th>\n",
       "      <td>2019-04-29 22:08:22</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.75</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2216</th>\n",
       "      <td>2019-04-29 23:05:04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2217</th>\n",
       "      <td>2019-04-29 23:10:18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.39</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2218 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                date  Rural  Suburban  Urban\n",
       "0    2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "1    2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2    2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "3    2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "4    2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                  ...    ...       ...    ...\n",
       "2213 2019-04-29 20:54:19    NaN       NaN  28.41\n",
       "2214 2019-04-29 21:20:41    NaN       NaN  13.59\n",
       "2215 2019-04-29 22:08:22    NaN     25.75    NaN\n",
       "2216 2019-04-29 23:05:04    NaN       NaN  14.59\n",
       "2217 2019-04-29 23:10:18    NaN     29.39    NaN\n",
       "\n",
       "[2218 rows x 4 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5. Create a new DataFrame from the pivot table DataFrame using loc on the given dates, '2019-01-01':'2019-04-29'.\n",
    "## Did not use loc() method, as converting to date and using conditionals was more intuitive in this situation\n",
    "df = df[(df['date'] >= '2019-01-01') & (df['date'] < '2019-04-30')]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-01 00:08:16</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>37.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 00:46:46</th>\n",
       "      <td>NaN</td>\n",
       "      <td>47.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 02:07:24</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24.07</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 03:46:50</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-01 05:23:21</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-29 20:54:19</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-29 21:20:41</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-29 22:08:22</th>\n",
       "      <td>NaN</td>\n",
       "      <td>25.75</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-29 23:05:04</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-29 23:10:18</th>\n",
       "      <td>NaN</td>\n",
       "      <td>29.39</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2218 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "type                 Rural  Suburban  Urban\n",
       "date                                       \n",
       "2019-01-01 00:08:16    NaN       NaN  37.91\n",
       "2019-01-01 00:46:46    NaN     47.74    NaN\n",
       "2019-01-01 02:07:24    NaN     24.07    NaN\n",
       "2019-01-01 03:46:50    NaN       NaN   7.57\n",
       "2019-01-01 05:23:21    NaN       NaN  10.75\n",
       "...                    ...       ...    ...\n",
       "2019-04-29 20:54:19    NaN       NaN  28.41\n",
       "2019-04-29 21:20:41    NaN       NaN  13.59\n",
       "2019-04-29 22:08:22    NaN     25.75    NaN\n",
       "2019-04-29 23:05:04    NaN       NaN  14.59\n",
       "2019-04-29 23:10:18    NaN     29.39    NaN\n",
       "\n",
       "[2218 rows x 3 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6. Set the \"date\" index to datetime datatype. This is necessary to use the resample() method in Step 8.\n",
    "# df.index = pd.to_datetime(df.index)\n",
    "df = df.set_index('date')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 2218 entries, 2019-01-01 00:08:16 to 2019-04-29 23:10:18\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Rural     116 non-null    float64\n",
      " 1   Suburban  579 non-null    float64\n",
      " 2   Urban     1523 non-null   float64\n",
      "dtypes: float64(3)\n",
      "memory usage: 69.3 KB\n"
     ]
    }
   ],
   "source": [
    "# 7. Check that the datatype for the index is datetime using df.info()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Rural</th>\n",
       "      <th>Suburban</th>\n",
       "      <th>Urban</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-01-06</th>\n",
       "      <td>187.92</td>\n",
       "      <td>721.60</td>\n",
       "      <td>1661.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-13</th>\n",
       "      <td>67.65</td>\n",
       "      <td>1105.13</td>\n",
       "      <td>2050.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-20</th>\n",
       "      <td>306.00</td>\n",
       "      <td>1218.20</td>\n",
       "      <td>1939.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-01-27</th>\n",
       "      <td>179.69</td>\n",
       "      <td>1203.28</td>\n",
       "      <td>2129.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-03</th>\n",
       "      <td>333.08</td>\n",
       "      <td>1042.79</td>\n",
       "      <td>2086.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-10</th>\n",
       "      <td>115.80</td>\n",
       "      <td>974.34</td>\n",
       "      <td>2162.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-17</th>\n",
       "      <td>95.82</td>\n",
       "      <td>1045.50</td>\n",
       "      <td>2235.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-24</th>\n",
       "      <td>419.06</td>\n",
       "      <td>1412.74</td>\n",
       "      <td>2466.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-03</th>\n",
       "      <td>175.14</td>\n",
       "      <td>858.46</td>\n",
       "      <td>2218.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-10</th>\n",
       "      <td>303.94</td>\n",
       "      <td>925.27</td>\n",
       "      <td>2470.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-17</th>\n",
       "      <td>163.39</td>\n",
       "      <td>906.20</td>\n",
       "      <td>2044.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-24</th>\n",
       "      <td>189.76</td>\n",
       "      <td>1122.20</td>\n",
       "      <td>2368.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-31</th>\n",
       "      <td>199.42</td>\n",
       "      <td>1045.06</td>\n",
       "      <td>1942.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-07</th>\n",
       "      <td>501.24</td>\n",
       "      <td>1010.73</td>\n",
       "      <td>2356.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-14</th>\n",
       "      <td>269.79</td>\n",
       "      <td>784.82</td>\n",
       "      <td>2390.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-21</th>\n",
       "      <td>214.14</td>\n",
       "      <td>1149.27</td>\n",
       "      <td>2303.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-28</th>\n",
       "      <td>191.85</td>\n",
       "      <td>1357.75</td>\n",
       "      <td>2238.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-05</th>\n",
       "      <td>67.60</td>\n",
       "      <td>167.92</td>\n",
       "      <td>342.63</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "type         Rural  Suburban    Urban\n",
       "date                                 \n",
       "2019-01-06  187.92    721.60  1661.68\n",
       "2019-01-13   67.65   1105.13  2050.43\n",
       "2019-01-20  306.00   1218.20  1939.02\n",
       "2019-01-27  179.69   1203.28  2129.51\n",
       "2019-02-03  333.08   1042.79  2086.94\n",
       "2019-02-10  115.80    974.34  2162.64\n",
       "2019-02-17   95.82   1045.50  2235.07\n",
       "2019-02-24  419.06   1412.74  2466.29\n",
       "2019-03-03  175.14    858.46  2218.20\n",
       "2019-03-10  303.94    925.27  2470.93\n",
       "2019-03-17  163.39    906.20  2044.42\n",
       "2019-03-24  189.76   1122.20  2368.37\n",
       "2019-03-31  199.42   1045.06  1942.77\n",
       "2019-04-07  501.24   1010.73  2356.70\n",
       "2019-04-14  269.79    784.82  2390.72\n",
       "2019-04-21  214.14   1149.27  2303.80\n",
       "2019-04-28  191.85   1357.75  2238.29\n",
       "2019-05-05   67.60    167.92   342.63"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 8. Create a new DataFrame using the \"resample()\" function by week 'W' and get the sum of the fares for each week.\n",
    "df = df.resample('W').sum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdEAAAEuCAYAAADRByhXAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAACVrklEQVR4nOydd3gU1deA35mt6YE0CD303ougIkWKFAFFEEFEEEVFRQXEgg1BUFFUimL9FJUf2EBpioCAdGlSQ++pJKRtnfn+WLJksgmpmwL3fZ48sHfuzJyd3Z0z91QpKSlJRSAQCAQCQYGRS1sAgUAgEAjKK0KJCgQCgUBQSIQSFQgEAoGgkAglKhAIBAJBIRFKVCAQCASCQiKUqEAgEAgEhUQoUcFNwYwZMwgODmbjxo2lLUqJ0adPH4KDgzl9+nRpi5JvbsbPSVC+EUpUUGiCg4ML9Ldo0aJ8H7tp06YEBwd7T/g8yLyZ5/ZXvXr1UpOtPGG32/nuu+8YMmQIDRs2JDw8nCpVqtChQwcmTJjA9u3b8zzG6dOnCQ4Opk+fPl6TM/OBI79/48aN85osgvKFvrQFEJRfJk+e7DH23XffcfbsWe6//34PRdO0adOSEq3Y6NSpE7feeqvHuNlsLgVpyhcnTpxg+PDhHDx4kAoVKnDHHXdQo0YN7HY7x44d43//+x9ffvkls2bNYuzYsQCMHTuWe+65h6pVq5aorMOGDfP4nDdt2sTmzZtz/A6Ux++ywDsIJSooNFOmTPEY27RpE2fPnmXYsGHcdtttpSBV8XLrrbfm+D4F1ycuLo7+/ftz7tw5HnnkEV577TX8/Pw0c5KSkvj444+5cuWKeywkJISQkJCSFpcHHnjAY2zGjBls3rxZfAcE10WYcwUlxq+//kqfPn2oXr06ERERtGvXjmnTppGSkuKek2m6O3v2LKA1GWc15/3999889dRTtGvXjmrVqlGpUiU6dOjA9OnTycjIKLH3VFA5Ms3EixYtYuXKlfTq1Ytq1apRo0YN9xyLxcJHH31E586dqVKlCpGRkdxxxx188cUXqGrBq3SqqsrHH39M27ZtiYiIoHHjxrz00kua6+5wOGjQoAHVqlUjNTU1x+NMmzaN4OBgvvzyyzzPOW3aNM6dO8eAAQN45513PBQouD7bl19+mfHjx7vHsvtEFy1aRPPmzQHYvHmz5vswY8YMDh06RHBwMH379s1Vll69ehEcHMzRo0fzlDsvRo4cSXBwMJs2bcpx+/r16wkODmb06NHusUxT8alTp/L8HLISExPDCy+8QKtWrYiIiKBGjRoMHDiQDRs2FPl9CIoPsRIVlAhvvPEGs2fPpkKFCgwaNIigoCDWrVvHu+++y4oVK1i1ahWBgYEEBQUxefJk5s+fz5UrVzQm46zm4Tlz5nD06FHat29Pz549sVgsbN26lVmzZrFx40aWL1+OXu/9r3dh5fjll1/466+/6NGjB6NGjSImJgaAlJQUBgwYwK5du2jWrBnDhg0DYO3atTz77LPs2LGD+fPnF0jGKVOmsGXLFgYOHEhgYCB//PEHc+fOZevWraxYsQKTyYRer2fkyJHMnDmTJUuWMGrUKM0xHA4H3377LQEBAQwePPi657NYLCxevNh97rwwmUy5bmvatCmPPfYYCxYsoFq1au7rAS4rQcOGDenUqRObNm3i6NGj1KtXT7P/wYMH2bp1K7feeqvHtsIwZswYfv31V7788ssczfxffPEFgMf1g/x9DpkcOHCAgQMHEhcXR9euXbnrrrtITEzk999/Z8CAAXz44YeMGDGiyO9HUHSEEhV4ne3btzN79mwiIyNZu3YtlStXBuC1115j3Lhx/PDDD7zxxhu8++67BAcHM2XKFL777juuXLmS6034vffeo0aNGkiSpBnPVNa//vor99xzT5Fl37RpEzNmzPAYv+eee6hXr16h5fjzzz9ZsmQJ3bt314y/+OKL7Nq1i9dee41nnnnGPW61WhkxYgTff/89/fr146677sr3e9i2bRsbN26kWrVqAEydOpURI0awYsUK5s6dy7PPPgvAQw89xHvvvccXX3zhoQR+//13Ll26xOjRo/H397/u+f79918sFguRkZHUr18/33LmRLNmzQgKCmLBggVUr149x+/DI488wubNm/nyyy89PqvMVXPWlWFRuO2222jYsCHLly8nPj6e0NBQ97aYmBhWrlxJ/fr1c1Sw+f0cnE4nI0eOJDk5meXLl2uOdenSJbp168bEiRPp2bMn4eHhxfK+BIVHmHMFXufbb78F4Nlnn3UrUABJknjjjTfw8fHh+++/x2635/uYNWvW9FBcAE8++SQAf/31VxGldrF582Zmzpzp8ZdpGiysHL179/ZQoJcvX+b777+nWbNmGgUKrtXa1KlTAdyrvPzy2GOPuW/cADqdjtdffx1JktyfDUDlypXp27cv+/fvZ+fOnZpjZCqjnFZY2clcVUdGRhZIzsLSt29fKleuzPfff68xoaenp7N48WLCw8Ova+4tKKNHj8Zms2muHcA333yD3W7P9Rrl93NYs2YNx44dY/To0R7KuFKlSowfPx6LxcKvv/5abO9JUHjESlTgdfbu3QvA7bff7rEtPDycRo0asWvXLqKjo2nUqFG+jpmWlsaCBQtYvnw5x48fJzU1VeMvvHjxYrHIPnny5OuaJAsrR5s2bTzGdu3ahcPhQJblHFe/DocDgOjo6AK9h06dOnmM1a1bl/DwcE6cOEFKSgoBAQGAy1z5yy+/8MUXX7hlPHnyJBs2bKB9+/Y0adIkz/Nlvv+cHi68QaYp+u233+bnn392m3x//PFHrly5wiOPPILBYCi28w0ZMoTXX3+dr776iqeffhpJklAUhf/7v//D19eXoUOH5rhffj+Hbdu2AXDu3LkcvwcnTpwAKBYfr6DoCCUq8DqZ0Ze5mZ4iIiI08/LCbrfTv39/du3aRaNGjRg0aBChoaFu3+PMmTOxWq3FILn35MjpWiQmJgKwZ88e9uzZk+t5cwv8yY3crntYWBgxMTEaJXrrrbfSqFEjfv75Z6ZPn+4OJFJVNV+rUHCtlgDOnz9fIDmLQqYp+ssvv3Qr0S+//BJZlhk5cmSxnisgIIChQ4eycOFC/vrrL7p168aff/7JmTNnGD58eK75zfn9HDK/B8uWLWPZsmW5ypGWllbk9yIoOkKJCrxOYGAgALGxsTneYDLNf5nz8mLFihXs2rWL+++/3yPI5tKlS8ycObNoAueTosiR0yot8/2PHTuWWbNmFZucsbGx1K1b12M8Li4OwK1AMxk9ejTPPfcc33//PaNHj+a7776jQoUKDBgwIF/na9WqFWazmQsXLhAdHZ3juYubSpUq0bdvX37++Wf279+Poij8+++/9OjRwyuFMUaPHs3ChQv54osv6Natm9vc/fDDD+e6T34/h8zvwf/93//Rv3//4hZdUMwIn6jA62SmKORUyi0+Pp5Dhw7h5+enucHodDrAFWSRnUxzVk43mM2bNxeLzPmhuOVo06YNsiyzZcuWIsuWlyzR0dHExsYSFRXloUSHDBlCYGAgX331FcuWLSM+Pp4HHngg3wUmzGYzQ4YMAeDtt9/Oc35eVoPM74KiKNedN2bMGMC1As2PUisKDRo04LbbbmPVqlXs3LmTNWvW0KJFC1q1apXrPvn9HNq2bQtQ7N8DgXcQSlTgdYYPHw7A7Nmz3atOcPnOpk6dSnp6Ovfff7/Gb5WZcJ+ZL5qVzJVFdqV86tQpXn311WKXPzeKW47Q0FCGDBnC/v37mTFjhtsHmpXz588X2Be2YMECzXV0Op28+uqrqKqaY5EBf39/hgwZwpEjR3j55ZeRJCnfptxMXn75ZapWrcqPP/7IlClTSE9P95iTkpLC9OnT+eijj657rAoVKiBJUo7fhax06tSJRo0asWTJEpYuXUrVqlXp0aNHgeQuCGPGjMHpdDJ8+HCcTmeeCju/n8Ndd91FVFQUX375JStWrMjxWHv37nWbfQWlizDnCrxOu3btePbZZ5k9eza33HILAwYMIDAwkHXr1rF3714aNWrEK6+8otmnS5cu7Nq1ixEjRtCjRw/MZjPVqlVj6NCh9OrVi6ioKObNm8ehQ4do1qwZ586dY/Xq1fTo0YNz586VyPvyhhyzZs3ixIkTzJw5k8WLF9OxY0ciIiKIiYnh2LFj7Nixg7feeqtAOY8dOnTgtttu0+QnHjx4kFatWrmjiLMzZswYFi5cyKVLl7jjjjuoXbt2gd5HWFgYy5YtY/jw4cyfP5/FixfTpUsXqlWrhsPh4Pjx42zatImUlBTeeeed6x7Lz8+PDh06sGXLFoYMGUKLFi3Q6/V07NjRI1gn0xQN8MwzzyDL3lsn9OnTh8jISC5cuEBgYGCeKVX5/RwMBgPffvstgwYNYtiwYbRp04bmzZvj5+fH+fPn2bdvH9HR0fz9999UrFjRa+9PkD+EEhWUCFOnTqVZs2Z8+umnLFmyBKvVSo0aNXj++ed5+umnPUyKzz33HFeuXGHFihXMmTMHh8NBp06dGDp0KH5+fixbtozXX3+dTZs2sWXLFmrWrMnEiRN54okn+Omnn0rkPXlDjoCAAH777Te++eYblixZwm+//YbFYiEsLIzq1aszderUfPsmM5k+fTrLly/n66+/5syZM4SGhvL4448zZcqUXAsd1K9fn7Zt27Jjx44Cr0IziYqKYsOGDSxZsoRff/2VzZs3k5iYiE6no1q1agwaNIjhw4e7zZfXY8GCBbz00kv8888//PHHHyiKwuTJkz2U6JAhQ3jhhRcAvF6MQK/XM2TIEN5//32GDBmSY1WmrBTkc2jUqBGbN29m/vz5rFixgu+//x5VVYmIiKBBgwaMHz++RHzNgryRkpKSCl5HTCAQ3NCkpaXRqFEjfHx8+O+//0qk+lNxsG3bNnr27MmAAQP46quvvH6+gQMHsm7dOrZs2ULDhg1znNOnTx82b97M3r17NeUdBTcGwicqEAg8+OKLL0hOTmbUqFHlRoGCy+8OripG3mbPnj2sW7fOXcVIcHNSfn4dAoHAqyQnJ/Ppp59y6dIlvv32W8LDw3nsscdKW6w8+e+//1ixYgX79u1j9erVdO3aNcfCBsXFp59+ysWLF/nhhx+QJImXX37Za+cSlH2EEhUIBICrNdlbb72FyWSiefPmzJw5k6CgoNIWK0/27t3L9OnTCQwMpH///rz33ntePd9HH33E+fPnqVWrFgsWLKB9+/ZePZ+gbCN8ogKBQCAQFBLhExUIBAKBoJAIJSoQCAQCQSERSlQgEAgEgkIilKigxCloKy9BwRDXt/wiPrvyh1CiAoFAIBAUklJTorNnz3bX0qxduzZDhgzh4MGDmjnjxo0jODhY89e9e3fNHKvVysSJE4mKiiIyMpKhQ4d69DFMSkpi7NixVK9enerVqzN27FiSkpK8/RYFAoFAcINTakp006ZNjB49mtWrV7Ns2TL0ej0DBgzg8uXLmnl33HEHR44ccf8tWbJEs33KlCksX76czz//nBUrVpCSksKQIUM0LbTGjBnDvn373N0d9u3bx6OPPloi71MgEAgENy6lVmwhe3HuTz75hOrVq7N161Z69+7tHjeZTEREROR4jOTkZL755hvmzp1Lly5d3Mdp2rQp69evp1u3bhw5coQ///yTVatWuZOi33//fXr37l1iDYMFAoFAcGNSZioWpaamoigKwcHBmvEtW7ZQp04dgoKC6NSpE6+88gphYWGAq3al3W6na9eu7vlVq1alfv36bNu2jW7durF9+3b8/f01VUU6dOiAn58f27ZtE0pUILiJcTgcpKWllbYYbsxmM8nJyaUtRrnFz8+vxGs9lxkl+sILL9C0aVPatWvnHuvevTv9+vWjRo0anDlzhmnTptG/f3/Wr1+PyWQiNjYWnU7nbuCcSVhYGLGxsQDExsYSEhKCJEnu7ZIkERoa6p6TEyJKzrvc7NdXUtIBCVX28crxi/X6qk580neic6aQ7tcORRdYfMcuZXx9falYsaLm/lCaZC4QBAVHVVViYmJybAAPeG3BVCaU6IsvvsjWrVtZtWoVOp3OPZ61yW3jxo1p0aIFTZs2ZfXq1fTv3z/X46mq6qE085qTHbFC9R43sxldVVXsJ77Gfm4JSDLG2qMxVBtQrOcozuurKjas+6fhTNwOQJBtOz5t5yLpfYvl+KVJcnIygYGBZUaBAlgsFsxmc2mLUW6JjIzkypUrJVrzudRTXKZMmcKPP/7IsmXLqFmz5nXnVq5cmcjISE6cOAFAeHg4TqeThIQEzbz4+Hj3E114eDjx8fGo6rUSwaqqkpCQIJ76BCWKqjixHZqN/fQPoDpBsWOLXoDt1OLSFi1HXAr0LZwJ26+NZVzEfuq7UpSqeClLClRQdErj8yxVJTp58mSWLl3KsmXLqFevXp7zExISuHjxojvQqEWLFhgMBtatW+eec/78eY4cOeL2gbZr147U1FS2b792I9i+fTtpaWmi+4KgxFCdNqz/TcNx6Q+PbfYTX2I79UMpSJU7qmLH+t90nAnbPLbZz/6Ckna2FKQSCMoepaZEn3/+eb777js+++wzgoODiYmJISYmhtTUVMAVaPTyyy+zfft2Tp8+zcaNGxk6dChhYWH07dsXgKCgIEaMGMHUqVNZv349e/fu5dFHH6Vx48bccccdANSvX5/u3bszYcIEduzYwfbt25kwYQI9e/a8aU2KgpJFdaRh2fsSzvgtuc6xn/gK28lFJShV7rgVaPzWXCY4sEV/orHuCAQ3K6XmE/3ss88AuPvuuzXjkydPZsqUKeh0Og4ePMgPP/xAcnIyERER3HbbbXz55ZcEBAS450+fPh2dTseoUaOwWCzcfvvtLFiwQONbXbhwIZMnT2bQoEEA9O7dm1mzZpXAuxTc7Ki2JCx7X0ZJOaYZl0xhqI4UcFrcY/aT3wAqxlrDS1jKa6iKA+uBGZ4K3xAE9mtRo87EnTgTtqEP7VDCEgoEZQvRT1RQ4twsgUVKRgyWPS+iZmgraEl+NTC3eAs14xKWva+AM0Oz3VDzAQy1hhfav1PY6+tSoG/jjNuklde3CuaWs7AeeBslaf+1cXNlfNp/gqQzFkrO0iY5ObnMNR3PK7CoT58+NGrUiHfeeacEpSpflPTnWuqBRQLBjYiSdhrLv895KFA5sAE+rd5FNoWiC26CucVboNNGutpPLcJ+8v9K1FyqKk6sB2d6KlCfSMwtZyKbQjDVG0fWW4ZquYj97E8IyhaqqqIqDlRHBqr9Coo1EdWegqoqpS3aDYlQogJBMeNMPkzGrudRrfGacV3FVphbvo1kuOaO0AU1ykWRfo/9xFclokhdCnQWztiNmnHJp/JVBRoKgOwfhb5KHw85FUuc12UUuGqJb968mYULF7priYeEhDDn/VkoljiU9AsoaaeJ3r+OChVD2b3tD5SMS1SMiOKT+XO4755+VK5UiSZNGvPDD9pAtgsXLvDwww9To0YNatSowX333cfx48dL6Z2WL4QSFQiKEWfiv1j2vACOFM24Lvx2TM1eR9J5mup0QQ0xt5juqUhPL8Z+/EuvKlJVcWI99A7O2A2acclcGXPLWchmbRqYMepBMGQptqBYsR3/3GvyFRZn8iHs55ahpF8obVEKjaoqqE4rqj0VxZrIjNefo23r5gwbcjcHd67k4M4VTH72ERYt+h7VdhnVkYrqtLLoh19p2rgezZs2cB9r5uxP6dX9Ntav+oYH7+/HuHHj2LXlT1RHGmlpafTr1w+TycTvv//OH3/8QUREBHfffXeuhQsE1xBKVCAoJhyxG7HsnaoJFgLQV+mDqfFkJNmQ6766oAaYW84AvZ9m3H7mf9iPf+YVRaqqTqyH3sUZs14zLpkrYW4100OBAkiGAIxRIzVjzpj1OC/v95hbWtgvrsGy61lsR+eRsfPpcpGOozptKNYEdI4ElLSzOFOOo6QcQ0k7jZJxAdUaT4BZwWjQ4WM2EhEeQkR4KMOH9OfEqTPs+Nd1/Z1OJ4t/XMEDQ7TFaPr26sJDwwdRJ6oGz41/mNs6tmH+p5+hpJ/nx+8+QVUczP3wPRo3bky9evX44IMPSEtLY/Xq1aVxOcoVQokKBMWA/fwKrP9NB9WhGTfUvB9jvSeRJF0ue15DF1gfc4sZoPfXHvvMj9iOLSxWRaqqrsIPzph1mnHJHOEy4ZrDc91XH9kL2b+2ZswWPQ9VceayR8nhTInGduQj4Oq1cqRgi55fptNxVKcNJf0MqjUBWUlDdWa4inHkg4jwUHp0u5XvFi8HYO36LVxOSmbwwLtANiFd/S61bdNcs1/b1k05Gn0SgD37D3L6zDmq1ahN1SqRVImMpHr1aiQlJXHy5MlifKc3JmWi7J9AUF5RVdVldj3xlcc2Y91HMVQbWKDj6QLrYW45A8vuKeBIdY87zv4EqoKx7qNFrsriUqDv47i0VjMumcJdCtQn565J7nmSDmO9cVj+fd49pqSexHFhJYaqfYskW1FQ7SlY908Dxa4Zdyb+izN+C/qwjqUkWe6oqopqjYXCBP1IeiTZwIPD7+eRx59n+oyZfPfjn/Tt25eKVVtqS5+awpB9q6E6UlDtWleDoig0aVSXz+a+le34BiqGVUF12sptBHZJIFaiAkEhUVUF27GFngpUkjE2fL7ACjQTXUBdzC3fBn2AZtxx7pcir6pUVcF26AMcl/7UimwKw9xqFrJPpfzJGNwEXUQXzZjtxNeo9iuFlq0oqKqC9eA7qJaYHLfboj9BdVpLWKp84EhFdeTmd5RANiLp/ZCMwUimMIxmfxTJFzmgDrqAKGS/atx512ACA4P46tslrFr9ByNGPOjxoLVz504kvQ+yORzZP4pde6OpV7cuSDLNmzTg5OlzhFQIJqpmtWt/NSoR7OtESTuFknYGxXoZNdsDikAoUYGgUGTWwXVkT/GQjZiaTsVQuXuRjq8LqIO55UxtEA/gOLcM29F5hVKkqqpgOzzHo/SgZAotkALNxFhnNGQNlHKkYDvxfwWWqziwn16sqfGbHdUSg/3M0hKUKG9U1ekR2axKJmTfqsj+tVyK0r8msm8Vl/IzVaB6jVr8u3sPZ86cJSEhAUVR0Ol0PPDAA7zxxhtUrlyZzp07e5xr+fLlfP311xw/fpz333+fDX9v4vHxzyL7R3Hf/aMIDwtl+Jjn2bz1X06fOc8/2/7llTc/4PjJMy65nBZUaxxK6kmUtLMotiRUxeFxnpsRoUQFggKiOq1Y/3vTYzWHzhdz87eKrYqPLiAKn5Zvu6oFZcFxfjm2ox8XKO/PpUA/xHFRGygimUJdUbg+lQssn2wKxVBzWDbZVuBMKdnUCGfiv9izKW85sAH6KlrTsv30YpSMnFeqpYFqTczmQ5dw6isi6X2RZEOOZvvx48djNBrp0KEDtWvX5uxZV9DU8OHDsdlsPPDAAznu98ILL7Bs2TI6derEF198wdy5c2nVqhWSJOMXFMaKlWuoWbsBDz/+Eh263scTz75BUnIKwUGebe9UZwaqJdalUNPPufJQnZYy7Xf2JsInKhAUANWRhmXfa5rKPQAYgjG3eAtdQO0c9ysssn8UPi1nkrF7sqbsnuP87y4faf3xSNL1n4VVVcF25CMcF1dpxiVjiEuB+kYWWj5DtQE4LqxCzchMJVGwHZ2PudU7JdJRQ7HEYTkwE3cgEYAhCFOTl5B0PjhiN167booN27GFmJu+7HW58kJ1WlFtSZoxyVgBldwjuAHq1KnDH394NjHI7K08bNiwHPaCiIgIfvzxx1yPGx4ezrx586/JpzhQHalgT0V15mZuVl2maEc6qhWQdEg6H9D7Iul8IZcHgRsNsRIVCPKJakvC8u8kDwUqmcPxaf1esSvQTGT/mvi0nAmGYM2448JKbIc/vO6KVFVVbEfn4biwUjMuGSu6TLhFUKAAkmzEWPdRzZiS/J9H2ow3cBXKf0vzcAES5saTkc1hSAZ/jLVHafZxxm3Cmbjb67JdD1VVUS2xaBS/bEAyVSzwsaxWKydOnGDatGn07duXatWqFYuMkqxHNgYj+7lMy5IpLMccZw2q05Wraom96kc9iZJxCcV25Yb2pQolKhDkAyXjEhm7nkNJ1ZoqJb8amFvPRvat4tXzy/418Wk1C8lYQTPuuLgK2+EPclSkbgV6/jetzMYKrijcYpJZH9oeXUg7zZjt2Geojoxc9igebMcWolw5rBkzRD2IrmKra7JV7oEcoK0jbI1eUKr+PNWe4kpjyYJsCsvTopATS5cupU2bNiQmJvLWW2/lvUMhkGQDsqkCsl91ZL+aSKYQkE1576g4UO1XUC2XUFJP4kw9hWKJdb3/MpAOVVyIAvSCEqe8FaBXUk9h2fuyRxk/ObAB5uZvasr4eV2WtLNYdk9GtSVqxvWVumNsOAFJ0hEdHU2dOnWwRc/HcW6ZZp5Lgc5C9iueFYtbrvTzZGx7VOPjM9QY4rESLC4cl9ZhPThTM6YLaYep2WseysiZfBjLrmc0Y8a6j5Ee2KXEC9CriivaNWseqKT3Q/KJRJKkPAvQlyVUp81l6nWkFyi3NRNJZwadD5Le1/VvIR4ickIUoBcIyhDO5MNk/DsxX3VwSwLZrxrmVrOQjCGaccelP7Edmo2qOkFVsUV/4qFAMQS7VqDFrEABZN8qGKoN0ozZz/zklbJ7SuoprIc/0IxJ5ghMjSbmeCPWBTVAX+lOzZjt5Deg2IpdtrxQbQlaZSNJLlNpOfQdSjqjy+TrG4nsH4XsVx3JFOpSivlQiKrTgmq7jJJ+HiXluCvq15rgKpxfjoKUhBIVCLKhqipK6ilspxbnUge3c651cEsC2beqS5FeLQyfiePSWqwH3yUw6Wcc537R7mQIwqfVTGS/6l6Ty1Dzfq1yV+3Yoj8p1nOojjQs/70JSpacT9mAqenL132gMdQepa1N7Egr8Shil9JI1oxJxoo3RCEDSZKQdGZkU8WrKTpRyL5VkUwVXcFG5PWQoLqifq0JKOlnUVJPXid/tmwhonMFAlw3OOflPTgTduCM3+GqIpMD+ip9MNZ7PF9l/LyJfLXHp2X3JM0q2RmzDv/skw1B+LSciexXw6sySXofjHVGYz14reG9M2Ebjvjt6EPbXWfP/KGqKtZD76Oma9vLGes9gS7g+u4B2VQRY60HsB1beO14GRdQnZYSeRjKNZgom4/7RkGSZFeUrt4XTK6cWBwZLrOvMz3vwheqA9Uah6T37ne2OBBKVHDToqSfdynNhO2uAurq9SMIDTXvx1DLsxpMaSH7RmJu9Q6WfyfnqvQxBOLT8m1k/5olIpMuogvy+d9Qkg+6x2zRn6Cr2PK6Bfjzg+Pszx79TvWVe2CI7JWv/fVV78Z+YTVq+hn3mGqJBd9qXv9MVfsV1GyNCWRTeLH5Acs6kqQDgz+SwfWIpyoOcGagOtJdftUcondVpxVVVcr8NSrb0gkExYjqtOFI2In16HzStzxMxtbR2KIX4Ez89/oKVDJgrPsYxqiRZUaBZiL7VHaZdnMqGG8IxNzibWT/WiUmjyRJGOs9TlbznZpxHvvZX4p0XGfSf9iOf6YZk/1rY6z3RP5lk/WY6j2mGVOdFq+XKlQVp4dPXdL7Ixn8ctnjxkeS9UiGAGSfCHT+tVxpNOYIyG7hKQdVkcRKVHBDo2TEXF1t7sB5eY/Wl3Y9ZCO6Cs3RhbRFF3pLjm3BygqyT6Wrpt3J12rH6gMwt5iBLiCqxOXRBdRBH9kbx4UV7jH7qe/QV+qKbAq5zp45o1gTr3bIyZLGo/d3+UF1+Ui1yCpbxVbowjrijPvHPaZa41EN/l4z0avW+GzBRDJSGf4+lQaSbEAyBqHYr2jTf1Q7ULZ9xkKJCm4oVMWOknwQZ8J2HAk7UNPO5L3TVSRzZXShbV2KM7hZgW/QpYnsUwlz6/exn/6B5MtxhDYd4/Xc1ethjBqJI/bva51onBnYjn2OufGkAh1HVZxYD8zwSOkxNXq+UKUKAYx1xpKRsDPLSZyo1kSvKDbVkYFqzyGYqIim7dLi9OnTNG/enHXr1tGyZcviP4FsgCxKVFXseYYklTZCiQrKPYo10eXXTNjhqkaTa5mybEh65OCm6ENcilPyrVrmzLUFQTZVxFTvcZKjowkvRQUKIBmDMEY9iO3oPPeYM+YvnFX6oAtunO/j2E985VEhylBjaJHqE8s+lTBUH4wliwVftSWhGgKL9cHJ1eZMW2Ae2YhkDC7ScceNG8f3338PgE6no3LlyvTo0YOpU6cSHFy0Y5c62R8uykGlI6FEBeUOVwrKSZzxW3EmbEO5ciTf+0qmUNdKM6QdugotkPQ+XpT05kYf2Qf7+RWoaafcY7bo+ZjbzMmX6dQRtxn7mSWaMblCCwxRI4osm6HGYDj5V5aRqwrPp0qxPUip9mTPYCJz8QQT3XHHHXzyySc4HA6OHDnCk08+SXJyMp9//nmhjmez2TAaS99sKskGNBmiQokKBMWDqthwXt6HM34bzvhtuUejZkeSkYMaowtpiz6kLZJfzXK92ixPSLIOU73Hsey+ZsJVUo7huLAaQ5W7rruvkn4e68H3tMczhWJu/EKx+C4lnflqOcBrt2zVkY7kSIViKKChKg7PYCJDgCvloxgwmUxERLiap1epUoWBAwfy3XffAa6VamJiIosXL3bPnzFjBsuWLWPLli2aObfccguffvopNpuNY8eOsXjxYhYsWEB0dDRms5lOnToxY8YMIiOLVmM530jZVqJ5RMyXBYQSFXigpJ/HeXkPkjHYVSvTp1Kp5EWqtiQcCTtcijNxl8ZXcj0kYwV0Fdu4/JsVWrnD6gUlj65CM3ThnXHGbnCP2U58hT78tlyLI6hOC5b9b2rN8pIOU5MXi2wKzYpsDkfSp2iS+it8ewUormjd7FYOBdDmuCaNKrrZ/dSpU6xduxaDoWB+1s2bNxMYGMjSpUvdFYJsNhtTpkyhXr16JCQk8OqrrzJ69GhWrlyZx9GKiWzmXFWxo6pqmX7wFUpU4EZVVRznfsV27DNtn0PZiOxbDcmvBrJ/TWS/Gsh+NZCKyTSV9fxq+lkc8Vtxxm9FST6M68aTN3JAPXRXC6HLAbXLfG7ZzYSxzhgy4rdei4y2X8F28htM9R73mKuqKrYjH2lMwK5jjEUX1KjYZZNMYaiOM0D5KTMH8Oeff1KlShWcTicWi8tkXNAC9CaTiY8//hiT6ZofeMSIa6bymjVrMnv2bNq1a8f58+epUqUE/OySzlUyMDMSW1Vckc1S2VVVZVcyQYmiOtKwHnrfI5kdAMXm6l6Sehxn1p7GOrNbocp+NZD8aiL710AyhuT7yVFVHCjJB9yKU824mD+BZSO6ii3RhXRAF9quUKkTgpJBNodhqDkU+4mv3WOO879hiOztkcPquLACx6W1mjFdeGf0Vft7RTZJZ0IyBqPaLnvl+N6iY8eOzJkzh4yMDL7++mtOnTrFY489lveOWWjYsKFGgQLs2bOHmTNnsn//fpKSktwr1HPnzpWIEpUkyWXSVbOkoqkOyrKqKruSCUoMZ8oJrP9Ny9JYOb87WlCuHPEM7NH7u9smyVlWr5mmOElJx3FpnUtxJu4ER1q+TicZK6AL7eBacVZoUWq1awUFx1DtHhwX1qBarj4kqQrWo/Mxt5zpfuByXjmC7egCzX6Sb3VMDZ7xqjlPMlV0FVwoYBeS0sTX15eoKFcO8KxZs+jbty+zZs1iypQpyLLsUcDd4fAsWuDnpy32kJaWxj333OMOWgoLCyMhIYHevXtjs5VcsX5J1qNmzedW7FCGf+tCid7EqKqK4+JqVxpC9o4WOl/kgDooaaezNT3OB45UlOSDmtJvABiCkE2hVEo9ifV8Ps20/lFuxSkH1BVm2nKKpDNirDsW6/7X3WNK0j6csRvRR9yOar+Cdf9b2kASnQ/mpq94PYJaknRIplBUSwwJ91x7oJN9qyDp819VSFUcV9ucXftuS4ZAZJ9KxSlujkyePJnBgwfz0EMPERoayv792rSg7K9zIjo6moSEBF555RVq1qwJwLJly66/kzfIwS9adj2iQonetKhOC7YjH+O49KfHNtm/NqYmLyH7uiLyVFsSStpplNRTrn/TTqGknbmWSJ9f7Mko9uTr/yAkgysYJVNx5lTOTlAu0YV2QFextStI7Cq2YwvRhbTBemCmR8S1qcEEr7RtywnJEAjZUlIUSxyyn2/+XRPWOG1VJUn26LTjLW677TYaNGjAu+++y1133cWcOXP45ptv6NSpE8uXL2fr1q15mmOrVq2KyWRi4cKFPPLIIxw5coTp06eXiPwaylmuqFCiNyFK2lks/01DTTvtsU0f2Rtj3cc0SeeSMRidMRhdhebuMVVVUW0JKKmnUdMylesZ18o1n1G0bgxBroIHoR3QVWxVbGkAgrKFJEkY6z5GxvbH3KZT1RpHxs5nNEXhAfTVBqKPuL1EZcMcrq1wpdhQbUlIprw7raiOdFS7tmWeZApFkkvuFvvEE0/wxBNP8PTTTzN58mSmTZtGRkYGgwcPZsyYMXlG2IaGhjJ//nzeeOMNPvvsMxo3bsxbb73FPffcU0LvwIUkZcsVLeNpLlJSUlL5CksrhziT/kNJO42uQkv36q60cFxah/XIHMiWBI5swtTgKfSVuhXp+KqqoFri3KvVrAo2q8lY8quOPqQDurAOyIH1S7212I1EdHQ0detevzVYaWI7thD7mR9z3S4HNcLccpbXFVBycjJBQUGaMSXjkrYgvSS70ryuI4uqKp7fb50Jybd6gX25FosFs7ns+v9KAtVpdT2MZyIb0BWgiUJOn6s3EStRL2O/uAbbodlXX0noQm/BUH0QclDjEs19UhUbtuhPcZz/zWOb5Fsdc5MXi6VdliTJSD4RyD4RENr+2vlVJ2pGDKolltMxGUQ1vKXI5xKUTww1h+G49FfOEbGGYFc+aAmu4LIimUJRHamaFAvVGo90Hb+makvyiCmQTOFlOrexTONhznWU6VxREaXhRRRLXLZoQxVn/D9Y/n0ey86ncFxa5+qr5205Mi5i2fVcjgpUF9EFnzZzvN5vUpJ0yL6R6Cq2wKkvGT+RoGwi6f0w1B6dwxYZc5MpyCXkR8wJSdYjZUuXUu1XUB05uyhUxe5RHF8yBIlykkVAkuRseaFqmTbplpoSnT17Nl26dKFatWrUrl2bIUOGcPCgNppTVVVmzJhBgwYNqFSpEn369OHQoUOaOVarlYkTJxIVFUVkZCRDhw7l/PlsVUGSkhg7dizVq1enevXqjB07lqSkJK++P1fS+Me5FkNXUqKxHpxJxpaHsJ1e4uFPKS4ccVvI2PEkSkq0doNkwFh/PKZGk8QPXlDi6Ct1RQ5soBkz1H5I43cvLSRDMMjaOrKqNc4jbQRAtWQPJtJ5KGFBwfHoclOGg4tKTYlu2rSJ0aNHs3r1apYtW4Zer2fAgAFcvnzNxDNnzhzmzp3LzJkz+euvvwgLC2PgwIGkpFxTOFOmTGH58uV8/vnnrFixgpSUFIYMGYLTeS3na8yYMezbt48lS5awdOlS9u3bx6OPPurV9+eM3YAzYVue81RrPPbjn5P+zwisR+ehpBcwVzO34yoObMcWulIKsuVhSubKmNvMxlClT5k1kQhubCRJxtR4CnJAHZBNGGoMxVD93tIWC3AFGWWPCs+pebfqSHOZfrPuW8LBRDcsHmkuZbc5d5kJLEpNTaV69eosWrSI3r17o6oqDRo04JFHHuH5558HICMjg7p16/Lmm28yatQokpOTqVOnDnPnzuW+++4DXJU1mjZtytKlS+nWrRtHjhyhffv2rFq1ig4dXO2TtmzZQu/evdmxY4dXAjBU+xXStz6iya+UgxphjBqJ/ewvOOO3knuZsaL7TRVLHNYDMzzzNAFdWEdMDZ4t1XqyZT3wpbwjrm/+yCsARUm/oFWSku5qkJHuajDRac0KSdKZkXyrFenBVAQWuVCsCajWBPdryVgR2Zw/M39JBxaVGZ9oamoqiqK4++GdPn2amJgYunbt6p7j4+NDx44d2bbNtcLbs2cPdrtdM6dq1arUr1/fPWf79u34+/vTvv21IJcOHTrg5+fnnlPc2KI/0RYokAyYGkxAV6E55mav4tPhM/RV+oGcU+/CovlNnYn/usy32RWopMNY5xFMTV4RBdkFgnwgmcNcdVwzUZ2oNteNXbVdzmZilK7WkhaWnWKhHHVzKTN2hxdeeIGmTZvSrl07AGJiXEVaw8K03ebDwsK4eNFVOiw2NhadTkdISIjHnNjYWPeckBBtLVdJkggNDXXPyYno6Ohct10PU8ZBQuK1tT+vBPTgwgULkOWYcg+kSp3wS9uMX+rf6JyeVYEy/abOI5+Q5t+ZNP+OqHIuOZSqQsCVVfhfWYWUbZXr1AWTGDIKuzUKjh0r1Psqbgp7fQX5Q1zfvDGbzR61Y7MjywGa36ZqS8aqGNA7tMFEis4fux2wZ0sdKwSZBeVvZiRV1SgnxWHFls/rcuXKlRzv7d6yzpQJJfriiy+ydetWVq1ahU6nzRfM/mSXn1Dn7HNymp/XcQpzwVVHBhnb3tSoMMmvJpVaPebpKHfTAlUZizP2b+xnfnIVes+GzplEYPKvBKauRl+5B4aqAzT5pqotCcuBmShXdnvuW7E1vo0mEWgsOfNGXghzo3cR1zd/JCcn52k6VVUjSlp6llWnit4Rp50k6dD7hGOQi57rLMy5LlRFp1noSzjzfV0CAwOpVq1kKl1BGVCiU6ZM4aeffmL58uXueo2Au+FsbGwsVatWdY/Hx8e7V6fh4eE4nU4SEhIIDQ3VzOnYsaN7Tnx8vEZpqqpKQkKCxyq3qNhOfJWtdJmMqeGE6yhQF5JsQF+pG7qIrihJ+7Gf/Qln/DY8/KZOC45zy3CcW+72mwJY/5vuEWYPMoZawzHUHCrqzQoEhUSSZGRTGMp1mjNIpjCkYlCggixIekDCfQ9UnaiKs0xe51K9u06ePJmlS5eybNky6tWrp9lWo0YNIiIiWLdunXvMYrGwZcsWt3+zRYsWGAwGzZzz58+7g4kA2rVrR2pqKtu3b3fP2b59O2lpaRo/aVFxJh/EcU5brFlfbQC6wPr5PoYkSegqNMPc7DV8OixEX6Vv3n7Tf5/3VKCGYMwtpmOsNUwoUIGgqOj9ci1FKel8cm0uXpZp2rQpH330kVeOvXHjRoKDg0lISMh7ci5IkuRZdKGM+kVL7Q77/PPP89133/HZZ58RHBxMTEwMMTExpKa6ouEkSWLcuHF88MEHLFu2jIMHD/L444/j5+fHvfe6QuGDgoIYMWIEU6dOZf369ezdu5dHH32Uxo0bc8cddwBQv359unfvzoQJE9ixYwfbt29nwoQJ9OzZs9hMXqpiw3r4A7KuHCVzJYxRDxb6mLJvVUz1n8S307cYoh5CMlbM337BTfFpNxddxRaFPrdAILiGJElIpjDwaJ1QOsFE8fHxPPfcczRt2pTw8HDq1q1L//79NYuJG4Hykitaaubczz77DIC7775bMz558mSmTJkCwNNPP01GRgYTJ04kKSmJ1q1b89NPPxEQcO3Jb/r06eh0OkaNGoXFYuH2229nwYIFGt/qwoULmTx5MoMGucyfvXv3ZtasWcX2XuynFmsLVwOmBk8VS79LyRCAseZQDNXvwRGzAcfZn3P0mwIYagzBUOvBMmnyEAjKMzk175aMwZpGDSXFiBEjyMjI4OOPP6ZWrVrEx8ezefNmEhOzu3RKnmLtO1pOWqKVmTzR8oqSeoqMHU9e7b7uQl+5B6aGz3rlfKqqoiTty+I3BfQBmBo9jz60+MzT3kQEvngXcX3zR0HzCV3NFWJRHWlIer+rq9DiNeblFViUlJREzZo1+eWXX9zWtuw0bdqUsWPHMn78ePdYnz59aNSoEe+88457zrBhwzh58iS///47fn5+jB8/XrNPcHAwX3/9tWahk/3YwcHBvPPOO2zYsIG//vqLhx9+mJ49e9KvXz9++OEHpk2bRnR0NA0aNGDOnDm0aNECgMTERCZOnMiWLVtITEykZs2aPPnkkwwfPvyazHf1pF7tqgQFBvB/3/2MLOsYev8w3njjDWQ59+suCtCXI1TV6TLjZlGgkrECxjqPeO2cLr9pc3QVmqNkXHJ1hwluUqDmwQKBIGf8R95RoudL/Xp9geb7+/vj7+/PihUr6NChQ5EieefNm8fTTz/NpEmT2LhxI5MmTaJGjRr079+/QMeZOXMmU6dOZdq0aQCcPXsWgFdeeYW3336bypUrM3PmTO677z727NmDr68vFouF5s2b8/TTTxMYGMj69euZMGEC1apVo3PnzlePLLH0l1U8+vBQVv78Gf8dPsPYJybRokULt0uvLCCiToqA49xylCuHNWPGeo+XWKCB7FMJfWh7oUAFgpsEvV7P3Llz+d///keNGjW48847efnll9m5c2eBj9W6dWuef/556tSpw6hRoxg6dCjz5s0r8HEGDhzIgw8+SM2aNTUZFhMnTqRbt240atSIuXPnYrFYWLp0KQCRkZE89dRTNGvWjJo1a/LQQw/Rr18/93YAJJn6dWsx5blHqRNVgwF9u3HbbbexYcOGAsvoTYQSLSRKxiVsx7/UjOlCO6ILu7WUJBIIBDcDd999N4cPH+aHH36ge/fubN++ne7du/Pee+8V6Dht27b1eH348OFcZudOy5YtcxzPLJwDrhV048aN3cd3Op28++67dOzYkVq1alGlShWWL1/OuXPnshxBonGDLG4JxU6lSpWIi8uWp1vKCCVaCFwdWj4ExXptUO+Hsf4TouyXQCDwOmazmS5dujB58mTWrFnDiBEjePvtt7HZbMiy7NFxxuEoeAF3SZLydRw/v4Jbwj766CM+/vhjnnrqKX799Vc2btxInz59PAKT9IaswUUqkqTm2E2nNBE+0ULguLQWZ+K/mjFj7THIogWSQFCuKaiPsqxQv359HA4HFouF0NBQLl265N5msVg4evQozZo10+yT3QS8c+dO6te/ltee/TixsbGa13mxY8cOt3k3LS2NgwcPMnToUMDVBKRXr17u16qqcuzYMY+AII/ArTKmQEEo0QKj2pJcBeazIAc3Qx/Zq5QkEggENwuJiYmMHDmS4cOH07hxY/z9/dmzZw8ffvghnTt3JjAwkNtvv51vv/2W3r17ExoaynvvvZfjCnLnzp3Mnj2bu+++m02bNvHDDz+wcOFC9/bbb7+dzz77jPbt2yPLMm+++WaBApneffddQkNDqVSpErNmzcJoNLoDgurUqcPPP//Mli1bCAkJ4dNPP+XMmTM0bdpUexAPJapQ1hBKtIBYj84HR5YG2rIRU4NnhBlXIBB4HT8/P9q2bcuCBQs4ceIENpuNypUrc++99zJx4kQAJkyYwJkzZ3jggQfw8/PjueeeczftyMrjjz/OgQMHeO+99/D19eXFF1/UpLNMmzaN8ePH07dvX8LCwnj99dc5cuRIvmV99dVXeemllzh27BgNGjRg8eLFbtPvxIkTOX36NIMHD8ZsNjNs2DAGDx6cg082u8ex7ClRkSdaABzxW7Hue00zZqg9GmONwaUiT3lF5DF6F3F980dJ5xPmB1GAXotiS0a1xLhfS4YAZJ/K193npu0nWtZRHWnYjnysGZMD6mCoNqiUJBIIBIIbm/JQ+k8o0XxiO/4FqjX+2oAkY2zwjCixJxAIBN4ih9J/ZY18+0RPnjzJb7/9xtatWzl69CgJCQlIkkRISAj16tWjffv23HXXXdSuXdub8pYKzsv7cZz/XTNmqHYvuoA6pSSRQCAQ3ATk1BJNVcpUd6o8leiqVav48MMP2bp1K6qqUqtWLWrWrEmzZs1QVZWkpCQOHDjA77//zquvvkr79u156qmn6N27d0nI73VUpw3rkQ80Y5JPFQy1HigdgQQCgeAmwdUSTa814yp2KIXC/7lxXSXavXt39u/fT69evfjyyy/p3LkzwcHBOc5NSkrir7/+4tdff+Whhx6iWbNm/PHHH96QuUSxn1qEmn5eM2Zq8HSpdG8QCASCmw1JNmjNuOVJid5yyy18++23VKpUKc8DBQcHM2jQIAYNGsTFixcLVYOxrOFMOY79zBLNmD6yN7oKzXLZQyAQCATFipTNL6qWrZZo11Wib775ZqEOWrly5ULvW1ZQFSe2w+9rknslYwjGOmNKUSqBQCC4ySjjEbplxztbxrCf/Qkl5ZhmzFj/SdExRSAQCEqQsp7mku/oXKvVyuLFi1m3bh0nT54kNTUVf39/oqKi6Nq1K/fddx9Go9GbspYo9pPfaF7rwm9DH3ZLKUkjEAgENyllPM0lXyvRAwcO0K5dO5555hl++eUXTp48SUZGBidPnuTnn3/mqaeeokOHDgUqCVXmUbJ0E9D7Y6r3eOnJIhAIBMVA06ZN+eijj0pbjIKRzSeKai9TnVzyVKKpqancf//9xMXF8corr3DgwAFOnz6t+ffll1/m0qVLDB06lLS0tJKQu0Qx1h2LZKxQ2mIIBAIBffr0cdfJzcqiRYuoUqVKKUjkXSRZB1KWojaqCqqz9ATKRp5KdNGiRZw7d47FixczYcIEIiMjNdsjIyN59tln+f777zl9+jTfffed14QtDeQKrdBXurO0xRAIBIJCk71PZ3lDkrN5HsuQSTdPJbpmzRq6du3Kbbfddt15nTt3pkuXLqxatarYhCt1ZBOmBk+JDi0CgaBcMW7cOIYMGcIHH3xAo0aNaNSokXtbamoqY8eOpUqVKtSrV8/DvPvxxx/TsWNHIiMjadiwIePHjycpKcm9PXPFu2HDBm655RYiIyPp27cvp06d8t4byp7mUoaUaJ6BRQcPHuTRRx/N18Fuv/12FixYUGShygrGqJHIPnnnyAoEghuDtL9Kti+wX1fvLTo2b95MYGAgS5cu1fgQ582bx9NPP82kSZPYuHEjkyZNokaNGvTv3x8AWZaZMWMGNWvW5OzZs0yaNIlJkybx6aefuo9htVqZPXs2H3/8MSaTiXHjxvHss8/y008/eefNZI/QVcuREr18+TLh4eH5OlhYWBiXL18uslBlATmwPvpqd+c9USAQCMogJpPJreSy0rp1a55//nnA1Rz733//Zd68eW4l+vjj14Ioa9SowRtvvMGwYcNYsGABsuwyXjocDt599113y73x48fzxBNPoCiKe06xUobTXPJ8t1arFYPBkNc0APR6fbm3vWfiarQtOrQIBILyScOGDT0UKEDbtm09Xmdthr1hwwYGDBhAo0aNqFq1KiNGjMBmsxETc62vp8lk0vSsrVSpEna7neTkZC+8k7KdK5qvPNFTp06xa9euPOedPHmyyAKVFWT/WqUtgkAgEHgQEBCQo7JKTk4mMDDQ/drPr+CFYc6cOcOQIUN48MEHefHFF6lYsSJ79+5l9OjRmgWSXq9VHZlxI4qi4BVyKP1XVsiXEp0xYwYzZszIc56qqiIIRyAQlFu86aMsLurWrcsff/zhcb/du3cvderk3Z5x586dHq/r168PwO7du7HZbMyYMQOdzmWJKxPBoh7RuY4y0xItTyU6d+7ckpBDIBAIBPlg9OjRLFy4kEmTJvHggw9iNptZs2YNP/74Y75SDHfu3Mns2bO5++672bRpEz/88AMLFy4EoHbt2iiKwrx58+jXrx87d+4sE8GikiS7/KKabi4O0JV+lbw8leiwYcNKQg6BQCAQ5IOaNWuyYsUKpk2bxqBBg7BardStW5evvvqKHj165Ln/448/zoEDB3jvvffw9fXlxRdf5O67XUGUTZo04e2332bOnDm89dZbtGvXjjfffJNRo0Z5+23liSQZUMneEq30laiUlJRUpPpJiqKQkJBAaGioMOUK8kV0dLQmKEFQvIjrmz+Sk5MJCgoqbTE0WCwWzGZzaYtRJlEyLqHar7hfS+ZwZGOwx7yS/lzzNCgfO3aM77//3iN1JSUlhccff5zIyEjq169PnTp1+Oyzz7wmqEAgEAhuYspohG6eSnTu3Lm88sorBAQEaMafe+45vv/+e6pUqUK/fv0wGo1MmjSJlStXek1YgUAgENyclNU0lzx9otu2baNfv36akOaLFy+ydOlSWrduzcqVKzEYDCQlJdGlSxcWLlxI7969vSq0QCAQCG4ycujmUhbIcyV64cIFd/hzJmvWrAFg7Nix7kIMwcHBDBkyhL1793pBTIFAIBDc1OTQV7QstETLU4k6HA6PqhdbtmwB8ChKX7VqVVJSUvJ98s2bNzN06FAaNmxIcHAwixYt0mwfN24cwcHBmr/u3btr5litViZOnEhUVBSRkZEMHTqU8+fPa+YkJSUxduxYqlevTvXq1Rk7dqymoLJAIBAIyjiSDrLmhapKmWiJlqcSrV69Ort379aMbdq0iWrVqlG5cmXN+JUrV6hYsWK+T56WlkajRo14++238fHxyXHOHXfcwZEjR9x/S5Ys0WyfMmUKy5cv5/PPP2fFihWkpKQwZMgQnM5rF3fMmDHs27ePJUuWsHTpUvbt25fvovoCgeDGpSysZAT5Q5IkT5NuNr9oaXyeefpE+/fvzwcffECHDh3o2LEjP/zwA+fPn+fpp5/2mLtjxw5q1cp/ubwePXq485qyFj3OislkIiIiIsdtycnJfPPNN8ydO5cuXboA8Mknn9C0aVPWr19Pt27dOHLkCH/++SerVq2iffv2ALz//vv07t1bpAIIBDcxfn5+JCUlERwcLNLzygmSbEBVrNcGVDvgWoCpqkpSUpJHEKy3yVOJPvnkk6xYsYInnngCSZJQVZV69erxzDPPaOYlJCSwatUqJkyYUKwCbtmyhTp16hAUFESnTp145ZVXCAsLA2DPnj3Y7Xa6du3qnl+1alXq16/Ptm3b6NatG9u3b8ff39+tQAE6dOiAn58f27ZtE0pUILhJ0ev1BAQEcOXKlbwnlxBXrlzR1L8VaHFeuYCafsb9WvbPQPav6X4dEBDgUdfX2+R5Nn9/f9auXcvvv//OqVOnqF69On369PHwk168eFFT+aI46N69O/369aNGjRqcOXOGadOm0b9/f9avX4/JZCI2NhadTkdISIhmv7CwMGJjYwGIjY0lJCRE86QpSRKhoaHuOTkRHR1dbO9D4Im4vt5FXN/yi8ViKW0Ryix+KXsISlrqfp3mdwvJFfNXVc9bC6Z8qWyDwcCAAQOuO6dJkyY0adKkOGRyc88997j/37hxY1q0aEHTpk1ZvXq1u/ddTmQvzJyTqSavYvliheo9hBndu4jrW34Rn931ccQnYs2iRAMM6YSX8vUq/RL4BaBy5cpERkZy4sQJAMLDw3E6nSQkJGjmxcfHu02+4eHhxMfHaxzOqqqSkJDgniMQCASCso/sow1mVS0XS0mSa+S5Eq1UqVKuKzZJkjCZTFSvXp0ePXrw5JNPerVmYUJCAhcvXnQHGrVo0QKDwcC6desYPHgwAOfPn+fIkSNuH2i7du1ITU1l+/bt7rHt27eTlpam8ZMKBAKBoGwjmbVBpqolHlWxe1YzKkHyVKIDBw68rtkzIyODo0eP8u677/LTTz+xZs0aDx9lbqSmprpXlYqicO7cOfbt20eFChWoUKECb7/9Nv379yciIoIzZ87wxhtvEBYWRt++fQEICgpixIgRTJ06lbCwMCpUqMBLL71E48aNueOOOwCoX78+3bt3Z8KECcyZMwdVVZkwYQI9e/YUZhOBQCAoR0g6E5IxBNWWaX1UUC1xSL6RpSdTUbu4ZLJx40buvfdeRo4cyaxZs/K9T79+/TzG77//fmbPns0DDzzAvn37SE5OJiIigttuu42XXnqJqlWruudaLBZeeeUVli5disVi4fbbb+e9997TzLl8+TKTJ0921/Xt3bs3s2bNIjg4uGhvWlAohN8HuJIEsgT+xW+5Ede3/CI+u7zJ2PUcSvIB92tzi+noKrYqNXmKTYkCTJw4kdWrV7Nv377iOqTgBuRmv1EYln+LaelnqDod1oeew3H7XcV6/Jv9+pZnxGeXN9aD7+C4tNb92lh/PIYqfUpNnmINLGrcuDGXLl0qzkMKBDcUuv92YlrqahkoOZ2Yvv0Q0vJfKlMguNmRzJU0r9WM0tU5xapE4+Pj8fX1Lc5DCgQ3DmkpmD6fqRmSrBYM65aVkkACQflDyhahq2SUboRusSlRq9XKjz/+SMuWLYvrkALBDYVp0cfIiXEe44Y/fgJH2WjrJBCUdWSfbCtRS+muRPOMzt21a9d1t2dkZHDs2DG++eYbjh49yvTp04tNOIHgRkG3ayOGzatz3CYnJaDfuhbHrb1KWCqBoIyhqsino1HNPqiVquU4xXMlWsaVaPfu3fMszqyqKmFhYcyfP99dCF4gEFzlShKmr2ZrhlRJQspSAMSwcjGOTj1BFEIX3KykJmOe+zr6g/8CYB3+FPY7B3lMk4wVQDaCYnMNOFJR7SlIhpItPJ9Jnkp07ty5191uNpupVq0aLVu2LPHCvwJBmUdVMX89G/nK5WtDOh2WcVMxz30dSVUA0J07ie6/HTibtistSQWCUkO6cBqf96cgx15wjxl//hJ7twEga72OkiQjmSNQ08+6xxTLJXRlVYkOG5a/4r4CgcAT/ZY/0e/8WzNmu3skzradcbS5HcOO9e5xw8rFQokKbjp0+7ZhnvcGUkaaZlxKS0G6dBY1sobHPrJPJZxZlKiacQkCSic1qFzVzhUIyhNSYhymb+Zoxpy16mPv43owtfe+T7NNf2AX8pljJSafQFCqqCqG1Uswz57ioUAz0Z08kuN4WfKLFlmJrl69mscee4xnnnmGLVu2FIdMAkH5R1UxfTELKT312pDBgGXsi3DV7aHUboSzXlPNboaV/ytRMQWCUsFhx/Tlu5i+m+t2aeSEfOJQzuMeuaKll+aSbyU6duxYevXSRg/++uuvDB06lOXLl7N48WL69evH2rVrczmCQHDzoF+/HP3+HZox271jPUxTtt5DtPttW4uUmHufW4Gg3JOShM87z2PY8LtmWJVkHK1v04zpThzO8RDlciW6bt06unbtqhmbMWMG7dq149ixYxw5coSmTZvy7rvvFruQAkF5Qoo5j+n7eZoxZ/3m2Hvc4zHX2aIjSsS1Os+S04nhj5+9LqNAUBpI50/h+/rj6A7v1YyrZl8sE6ZjffAZzbh85hjYbR7HKUu5ovlSolarlfj4eBo0aOAeu3DhAkeOHOHJJ5/Ex8eHwMBAHnvsMQ4fzvnJQSC4KVCcmD+biWS1uIdUsw+WR17wiDIEQJax9RqsGTKsWwa5+IgEgvKKbu9WfN94HDnugmZcCatMxitzcTbvgBocglIx3L1NctiRz57wOJZH6T9LDKrq9I7geXDd6NxmzZohSRJOp0u4SZMm8fLLLwOQlub6kb/00ku89NJLSJKE1WolOTmZ5s2bAzBu3Dgee+wxb8ovEJQpDKuXojuqbcBgvf8J1LDKuewBjk49UX/6AiklGQApIw3DhhXYsylXgaBcoqoYVi/F+MN8D/+ns35zMsa/DgHB7jElqgFyFpeG7sQhlKgGmv0kvQ8YgsCefPUcTlRLPJKPtt9oSXBdJZrZjcXpdFK5cmWmTJnCyJEjAZgyZQqrV6/m33//dc9ft24dDz/8MHv37s3xeALBjYx87iTGHz/TjDmatcfROY8OEyYz9m4DMP7ytXvIsGYp9jsHgk7kXgvKMQ47pq/fx/D3Co9N9s59XOZbvbahtjOqoSYtTM7FLyr7VEbJVKJcNemWNSWaiU6no127drz99tsEBASQlpbGt99+y9ixYzXz9u7dS61atbwiqEBQpnE4MC2cgWS/VgNX9QvA+vDEfFUhsncbgOH375Gu+n/khBj0Ozbg6NDNayILBF7lShI+H031sMyokozt/nHYe9yb428j+6pTl0uEruRTCa5cU7BKxkV0FZoXg+AFI9+BRe+99x4+Pj6MHj2ap556isaNGzNhwgT3dqfTybfffkufPqXX1+2mRHGCWmwtYQWFxLD8W3SnjmrGrCOeQa0Qmq/91cAKrrJ/WY+5YrH4bAXlEvncCXxff8xTgfr4YZkwA3vPwbk+XDpr1kfNsk2+eAaypIq5x8tIS7R824rq16/Pjh07iI6ORqfTUadOHU1N3YyMDD744AOaNm16naMIigWHHf3WvzD8+RPyqWhXwIqvH6qPH6qvP6qvP/hce+3a5o/q63dtm3vMtT27SUWQf+STRzAu/0Yz5mjbGUeHrrnskTO2XoMxrF/ufq07fRTd4T04G4rOSILyg27PFszz30SypGvGlbBIMp6dkWMFIg0+viiRNdCdP3XtmCeP4GzcWjOtrLREK5DDRafTaSJ0s+Lv78+tt95aLEIJciEtBcP65RjW/IScFH9t3KlASrI7MKUwqAYjqq8fXFWsqn8gjha34Ojc110cQJADNiumT2cgOa9FBipBFbCMnFDgYvJq5eo4WnZCv3uze8yw6n9CiQrKB6qKYeVijP/7RNNcAcDRoAWW8a+Df1C+DqVENdQoUfnkYQ8l6pnmElM4uYuIuDuWA6S4ixjW/Ijh79+RLBneOYfdhpRsg+RrhdL1+7bhXL8c68MTUWrl/PB0s2P86Qt0F05pxqwPPa+JNiwItl73aZSofs8WpAun8356FwhKE7vNFUC0caXnpjv6YR3xVIGsXc6oBppj6U4cJnvH3expLqW1Er2uT7RXr16FqkC0Zs0aj+pGgoIjnziMad7r+E58AOOapV5ToNdDd+Y4Pq8/jvH7eWAt+fOXZeQj+zCs0pbps9/aC2erToU+plK/Gc5sDyzGVaIUoKAMcyUJn1nPeShQVZKxPjAe60PPFthdpEQ11LzOqfyfZA4FSXdtwJ6M6kj3mOdtrrsSbdGiBQ888AARERHcc889dO7cmebNmxMcHKyZl5SUxJ49e1i3bh0///wzcXFxjBo1ypty37goCro9WzCu+h+6I7mnCqlGM/bOd2HvcS9qcIirRmtGGlJ6KlJ6Wpb/p7qKO2ekIaVfHctIhfQ0pKtzSE+7bv1KSVUwrvof+l0bsT70HM4mbbzxzssXlnTMC9/WmK2UkAisDzxZtONKEvbeQ9DNe909pN+8Bts9o1GDKhbt2AJBMSOfO4H5/ReR47VBPaqvH5bHXy10VyKlahSqweCOdpcvxyMlxqFWDHPPkSSdqyVaxrXiDarlEpJ/VKHOWViuq0TffvttnnzyST755BMWLVrE+++/jyRJBAYGEhwcjKqqJCUlkZKS4m7MPWTIEB599FGqVq16vUMLsmOzot+8GuOqJciXzuY6TQmqiP3OQdi79Af/QPe4ajRBcAiFiuVUVbBmuJUs6akY/voVw5Y/NdPkuIv4vPM89lt7Yr3/8Xz7N25ETD8s8Ki8Yh09CXz9i3xsR5vbUEIruW9MksOOYe0v2AY9XORjCwTFhW7PP1cDiLQWKiU8kowJ+Qgguh56PUr1uuiOH3QPyScP48yiROFqS7QsSlTJuIRclpQoQNWqVXnzzTd57bXX2Lp1K9u2bePo0aMkJiYCULFiRerXr0/79u1p166daMxdQKQrlzGs/QXD2l+uGxjkrFITe68hOG7pBgZjMQshgdkX1ezrftKz1muK45Y7MX09GzlB67A3bFqNbu82bMPH42jftcABNOUd3f7trtJ8WbB1H+gR+FD4E+ix97wX06KP3UOGP3/B1mcYmMzFcw6BoAgY/vgJ46KPPAOIGrbE8uRrxfKA7YxqqFGiuhOHcWYrUJ89Qrc0urnkW+PpdDo6depEp06F9/cIriFdPINx1RL0m1e7E+xzwtG4NfZe97nMIiWsrJzN25M+/UuMP36O4Y+fND8YOSUJ8/w3cfzzB9aRE1BDSr5SSKmQloLp81maISWiKrb7Hi3W09hvuwvjz1+5W6lJaVfQb1qFo9uAYj2PQFBQ5MN7c1Sg9i79sQ5/qtii+bMXXcjZL5otuKgUInTFsrEkUVXkI/swrlyMfs8/uU/T6XC074a912CUGqXTrd2N2RfbA+NxdOiG6Yt30J07qdms37sV3YsPYbv3Eezd7gZZl8uBbgxM336IfPlaepEqyVjGTin+FaKPL/Yu/TH+/p17yLjqfzi69Lvhr3GRUVV0+7cjHz+EUq02zqZtwORT2lLdGGSkY144Q6NAVUnG9sCT2LsPLNYHfWe24CLdySOgKJpGDh5pLmV5JSooAk4H+p1/Y1i5ONdO7eCq5mHv0h/7nQNRs3QyKAsotRuR8fqnGH7/HuOyb5Ac1wLOJUsGpm8/RL91LdZRz6NUvTFLP+p2/o3hnz80Y/a7hqLUaeyV89nvHIRh1f+QnA4A5NgL6P79B2eb2/LY8ybG6cC46GOMa39xD6kGI87GrXG07ISzxS2owSGlJ185x/T9XI8gIstTbxYpIj031IgqqL7+16wxGWlIl85qfK2ST/Y0l5KvWiSUqJeR4i9hnv2CJnE4O0pIBPYe92LvfBf4+JWccAVFb8B+94M42nbG/OW76I7u12zWHTuAz9RHsPd7AFvfB4rfd1uKSFcuY/pqtmbMWa02toEPee2caoVQHLd0w7BptXvMuHIxGUKJ5owlHfO8N9Dv3aoZluw29Hu2oN+zBVWSUKIa4mjVCUerW1ErV7/pfPqFRbfnH49G2rY77/GKAgVAklzF6P+71txed+IwjixKVDZn84laLqGqCpKU74q2RabkznQzojgxz309VwXqrFkPy7hXSH9nkavtVVlWoFlQI2uQMWUOlpETUM2+mm2S04Hxl6/xnfoIcvR/pSRhMaOqmL58Dzkl6dqQTo917BSvPyjYew3RvNYd+w/52AGvnrM8IiXG4fPWUx4K1GOeqqI7fhDTkoX4TRmJ7+QRGL+fh3xkn6sOtSBnUpIwffGOZkipXA3b4Ee8eloPv+hJbUcXyeAP+iwR8Yod1ZboVZmyI1aiXsSwemmOHQgcLW7B1nsISv3m5fcpWJZxdL0bZ4tbMP3fHE2VHQD5wml83hqPvevdrh9aOXlAyAn9P3+g/3eTZsw2YCRK9TpeP7dSLQpH07bo9197GjeuXIxl/BteP3d5QT5zDPP7U5AT4zTjSnAI6PXI8bkHm8gx5zCu+h/GVf9DDQjC0fwWHK06uXKhhR/Vhapi/mo2cpZqZqosY3nkRa9Hi3v4RXNoiyb7VEZJib4mW8YlMOWv8UNxIJSol5BizmH88XPNmKNhS6wPPnNDlXBTK4ZjeXoaup0bMH0zR/NDk1QV49pf0P+7CevIZ3G27FiKkhYOKSEW07dzNGPO2g2x97m/xGSw9xqiUaK6XRuRYs6jRlQpMRnKKrp92zDPfc0jV9FZoy6WCTNQg0OQz55At3sz+n83eXTayYqUkoxh0yoMm1Zp/agtO97UhS70W/7U9PcEsPcbgVK7YS57FB9Krfqa1/KZY2C3aSxAkk8lyKJElYxL6IKbeF22TAqlRM+ePcvmzZuJi4tj4MCBVK1aFYfDweXLl6lQoYLIFVUUzF+8o0ldUX39sT728o0Z1CBJONveQXqj1ph+mO/RgFe+HI/PBy9ib9cF2/DxpSRkIVBVTJ/PclWAyhwyGLE8MqVEm2U7G7fGWa02urPHAdfDiWH1EmwPPlNiMpRF9OuWYfq/D5AUbbUtR4uOWMa9DFddDUr12ijVa2O/+0GkxFh0u/9Bv3szuoO73UFb2dH4Ub+SUGo3wtGy403nR5USYzF984FmzFmjHrb+I0rk/GpwCErFcOTEWJc8Djvy2RMaM69srkRWQ3xJR+gW+E7w4osv8umnn+J0OpEkiWbNmlG1alXS09Np1aoVL7zwAk888YQ3ZC036NcvR3dYW7LPOuyJG1OBZsUvAOvoSThu6Y7py3eRY7UVfQzb16E/sJOwTnchVQhADa2Uy4FKGUVBPnkE/ebV6A/s1Gyy3TfWdRMtSTJLAX463T1k2LgS26BRN2fVKEXB+L9PMK5c7LHJducgbMOeyDUNSK0YjqPbAFe+bUYa+n3bXavUvVvdUaDZkVQV3bED6I4dwLRkIUpEVZxRDVDDq6CER6KER6KGR7pWqzeSclVVTJ9lf4g0YHn0xRLt7KRENXArUXA16c6qRLNH6KqWko3QLdCV+PDDD5k/fz5PPfUUXbt2ZcCAAe5tgYGB9OnTh99+++2mVqJSQgymxZ9oxhxN2+K49eYpyO9s1Ir0t77E+MtXGFYu1qwUpLQUqq5ZDGsWo1SqhqNJG5xN2uJs0AJ8fHM/qLe5koR+/3Z0+7ej/29HjtWjHA1bYu8+qBSEA0f7Lij/+9TdAk+yWTH8tQx7Ca0Iygw2K+ZP3vIwL6qShG3Yk9h73JP/Y/n44WjfBUf7LlgdDnRH96H7dzP63Zvy9KPKMec8xlWTGSUsEjUiq3J1/V8NCS9R60VxoP/rV8+HyHvHolapWaJyOKMaaj5vOZtfVC7lvqIF+lS//vpr7rvvPl5//XV32b+sNG7cmL/++ivfx9u8eTMfffQRe/fu5eLFi8ydO5cHHnjAvV1VVd5++22+/vprkpKSaN26Ne+++y4NG16zxVutVl5++WV+/PFHLBYLt99+O++99x5VqlzzFyUlJTFp0iRWrVoFuLrTzJo1y6OQfpG5GsWZtRmtavbB+tBzN9YTan4wmrDd9yiO9l0xff4OutOevij50lmMl87Cnz+j6nQodZq4lapSs653iwooTuQTh10rkX3bkE8d8ajAkhXV7It1zGRNoneJojdg73EPpv9de0Az/PkT9l73gdFUOjKVMFJyIuY5L6E7rg3WU41mLONeKVqqhV6Ps1ErnI1aYXvgSeSzx10K9d/NOX53c5TPakF37gScO+GxTdXpUEMiUMKroF5VsErE1f+HRZa5co7SpXOYfpivGXM2aF6wh5RiInuEbvZgzexVi9QSzhUtkBI9d+4cTz31VK7bAwICSE7Of2PotLQ0GjVqxP33389jjz3msX3OnDnMnTuXuXPnUrduXWbNmsXAgQPZsWMHAQEBAEyZMoUVK1bw+eefU6FCBV566SWGDBnChg0b0OlcN+ExY8Zw7tw5lixZgiRJPPXUUzz66KMsXuxpDioK+s1r0O/frhmz3vdo2TVblgBKjbpkvDoPw+qlGH/+EslmzXGe5HSiO7LX1bnmx89R/QJxNG6Ns0kbnE3aFEtZQSk5Ed3+Hej2bUP/306ktCv52k/VG7CMnlTqn6P9jr4Yl/2fO4hGTr6MfsufODr3KVW5SgLpwml83pvskeivBFXEMmGGRwBK0U4moVSvg1K9DvYBI6/5Uf/djO5Q7n7U6x7S6USKveDh4shECQ5BDa9CaK3GEFWrdFetTgfmT6drfquq2RfLmBdK5SHSWbM+qiS5H3Lli2cgPdXd7EEyh+PK1nRZvFRbIqrTiqQrmYfLAn1SFStW5NKl3LX8gQMHqFy5cq7bs9OjRw969OgBwOOPP67Zpqoq8+fP55lnnuHuu+8GYP78+dStW5elS5cyatQokpOT+eabb5g7dy5dunQB4JNPPqFp06asX7+ebt26ceTIEf78809WrVpF+/btAXj//ffp3bs30dHR1K1bPGX1pKQETN99rBlz1m+Oo0v/Yjl+uUanx37XUBztu6DftBrbzk34nz+O5Mw9L09Ku4Jh+zoM29cBoFSujqNJW5dSbdDcHTRyXZwO5OMHr642t+d7RQGuVk7Oxm1wNGuPs3mHshGd6ReAvXNfjKuXuIeMq/6H47bepbdCLgF0h3Zj/vAVD5+ls0pNLM/N9Hrd5ux+VN2Jw0ix55GvKsXM/xel36+clABJCVQ7ug9HzGksj08ttdWpYcUPmsLvANYHxqOG5f/eXqz4+KJE1tDk2+tOHnE3fJBkPZI5DDVL3VzVEoPkVzKxCwVSoj169ODrr79mzJgxSNnMk3v37uXbb7/l4YeLp13T6dOniYmJoWvXru4xHx8fOnbsyLZt2xg1ahR79uzBbrdr5lStWpX69euzbds2unXrxvbt2/H393crUIAOHTrg5+fHtm3bik2Jmr6Zg5SW4n6tGoxYHp54Q9/cCooaEoH97gc51ugW6latgu7wHnT/7UD/387rtn8D19On8eIZ+ONHVJ0eZ90mLl9qkzau+sJXr7N0Of7aavPAzlyDRXLCWaMuzmbtcTRrh1K7UZn0Ydl73IPhjx/dfmb5wml0+7fjbN6hlCXzDvpNqzB98Y7HA5ejcRtXt5BiaD1XIHz8XDfv7B17VBUpJcm12ow57151yrEXkOLOa1K/8kK/5x98Zj1HxoTpJR44Jp+Oxvjzl5oxR8tOOG4r3ZgOJaqhRonKJw5ruiZJ5koaJapkXEQui0r0xRdfZO3atXTs2JGePXsiSRKLFi3i66+/5rfffqNatWpMnDixWASLiXFdkLAwbf+4sLAwLl50OY5jY2PR6XSEhIR4zImNjXXPCQkJ0Sh9SZIIDQ11z8mJ6OjoXLdlJ/jQLmplC3S4cHt/YlMyNPlLgmtEnzsP/mHQ4S7ocBfGpHgCThwk4ORBAk4eQm/JvUO95HSgP7wH/eE9sHQhDh9/UmvUw3g5Ft8cAj5yw2H2JSWqMVdqN+FK7cY4st6wTpzMfcdSpmaD1lQ4eC1v1PHjlxzz1f4GCvL9LZOoKpU2LKPypt88NsW3uI2zvYfB+ZIvNp43Rgiv5frLgmy1YEqKw3g5DtPlOEyXY93/NyYnePjjdccOoHv1MY7f/zT2oJKJ6pccdup//pbmgcXu68/hzoNwHDtWIjLkRoh/RbKqxIz9OznZ4FrD7yC7L1nLucSe2U/aZa31qLgWTNkpkBKNiIhg/fr1vPnmmyxbtgxVVVmyZAkBAQEMGTKE1157rdiDdbKveFVV9RjLTvY5Oc3P6zj5vuCpyfh+qPWtOms1IOiBxwgqgyuZskDOZvS60PYWACyKE/nk0Wur1OMHrmv61WekEnz433yd21mr/tXVZnuUWvUx6PSEAOUp+Ui+bzS8dk2JBpw+Qn2DilKzHpDb9S1H2G2YPp/l0RQewDr4Ecx9hlH3BgnUswN2hwP50hlMn7yF7sxx9zaf+Is0+vZdLM/PQqnq/UbTxsULMMad14w5Rk+mVsti6pNbBGSDCisXuV8Hxp7VfMdtp+pjP7HF/TokwElkCf0G8n2Xt9vtbN++nUqVKjFnzhzmzJlDfHw8iqIQGhqKXMxmy4gIl58jNjaWqlWrusfj4+Pdq9Pw8HCcTicJCQmEhoZq5nTs2NE9Jz4+XqM0VVUlISHBY5VbGEyL5iJfyVIOS6fHOmZSmTQFlhtkHUrthii1G2K/+0GXH+pQFtNvAVabqn8gjqbtcDZth7NpW9TACl4UvGRQajXA2aC5JhfZsOp/WB97uRSlKiZSk/GZ8wq6o/s0w6rBgPWRF3G071JKgnkRvR6lahQZU+agvv0cAaevdXqSL8fj89ZTZDwzHaV+M6+JIB/ZhyFb3q29U88y0zFIqRqFajAg2V3do+TL8UiJcagVXffw0myJlm/Np9PpGDBggCaFJTQ0lPDw8GJXoAA1atQgIiKCdevWuccsFgtbtmxx+zdbtGiBwWDQzDl//jxHjhxxz2nXrh2pqals334tanb79u2kpaVp/KSFQbd3K4Z/1mjGbP2Gl8hT402Fjx/OVp2wPfgM6bO+Je3d77E89ByONrejZvOJqZKEs3ZDrAMeIn3qfNI++hnrYy/j6NTjhlCgmdh6awvT67f9hZRQ8g2JixMp5hy+bzzhqUADgsiY/P6NqUCz4uvP8fufxtG2s2ZYSk/F553n0O3a6J3z5tAjVKkYjvWBJ71zvsKg16NU164ssxajlzxyRUsuzSXfyyVZlqlevTqpqfkP1MiL1NRUTpxw5VQpisK5c+fYt28fFSpUoFq1aowbN4733nuPunXrUqdOHd599138/Py49957AQgKCmLEiBFMnTqVsLAwd4pL48aNueOOOwCoX78+3bt3Z8KECcyZMwdVVZkwYQI9e/YsmskrIw3TV+9phpxVo7D3eyCXHQTFhRpWGUeXfq4G1U4H8skjrpqafgE4GrWCgODSFtHrOJt1QKlc3RXuD0iKgmHNj9jufzyPPQtJajLSlSTw9Uf1Dyr2ijXy0f34zHkJKVWbdqRUqkbGs2/fNHWCVb0By+NTMX77kaYnqmS3Y/7oVawjnyn2iH/T9/OQ47QrN+uYyeAXUKznKSrOqIaaqGHdicM4W7tWynL2XFHLpXy5/oqDAv0SHn/8cT788EOGDx9eLKbQ3bt3069fP/frGTNmMGPGDO6//37mz5/P008/TUZGBhMnTnQXW/jpp5/cOaIA06dPR6fTMWrUKHexhQULFrhzRAEWLlzI5MmTGTTIVW2md+/ezJo1q0iymxYv0HSNUCXZZcbVG4p0XEEB0elR6jT2WmPsMossY+t1H+Yv33UPGdb/hu3uB4vn+FaLq4LPgV3oDuzU+OrA1UBe9Q9C9Q9EDbj6r+Z1EAQEofpd255b2zj9tr8wLZzhNtVl4qzfnIyn3gT/wOJ5T+UFWYdtxNOoFUIxLf3MPSypCuavZmNLSsA24KFiKeCi27MFwwZt8Jatxz2ayNeygkdbtKxFFwyBoPMB59U0I6cF7MlgDPa6XFJSUlLuZVqyMWfOHBYvXszZs2fp06cPNWvWxMdH2y4os5jBjYzu0G583p6gGbPddT+2IY+WkkTli3If+FJWsFnxfW6oxidvHfIYB+u2Lvj1zQzmOrjLpTij/0Ny2PPerwCoZp8syjYINcAVDZ1TAJG9451YH554QzV2zw/Zfxv6v1dg+vJdjyL79jv6YR35TNGqeqUk4fvSKE36jVK5OulvLCyTVbCkS+fwmzzc/Vr18SNt3nJ3elvG9nEoqdei6s2t30cX5P1OMwVaib722mvu/+dW7eeGV6JWi2dz2oiq2AY+VDryCG5ejCbs3Qdi+ukL95BhzVKkqOZ576uqSDHn0R3Yhf7gLnQH/y1QTm1hkCwZroIE16lLC65ercW10irvOG6/CzUwGPPc1zUVhAzrlyNduYxl3CuFU3iqivnr9z17hI59sUwqUAA1ogqqr7/7eyplpCFdOutuLSmZK0MWJapmXIKypkT37t2b96QbHONPX2hKd6mShGXMpDL7xRPc2Ni79sf42yL3DVa+HE/wwZ3QwPPmIV25jO7gv1dNtLuQCxCIpEoSakiEqy50Wsp16wwXFlWnx/rwRBy39iz2Y5dnnC06kjF5Nj6zp2hKVer/3YTPO8+T8cz0Avsv9VvXot+xQTNm7z/Cw2RappAkVzH6/7L01j1xGEemEs0WoVtShegLpESrVy/hFlBlDPnYAQxZSq4B2LsNQKnnvdBzgeC6BATjuLUXhr9+dQ+Fb12DMnA42Kwuv+Z/O11m2mx+zbxQwiJdjambtMbZsOW16jmKE9JTkVKvIKUkZ/k38y/LeGoyXP03u0kyK6qvP5an3nSdR+CBUqcx6S9/hM87E7VtwY7ux+et8Vien4VaMTxfx5ISYzH93weaMWfNetj6lf2OQEpUA8iiROUTh+DqQ5dHmksJtUQTyYz5xW7D/PksbRh4aAS2wY+UolACAdh6Dka/bpn7u+kbcxbn6+OQzx4vkF9T9QvE0aiVqz5xo1ao4ZE5T5R1kOnXrFQtfwdXFMhIy1nJAo52Xdw5f4KcUSNrkPHKXMzvTUJ37prZUnf+FD5vPknGxHfcps3cD5LZI/Sa6d7VI/SlEu0RWlicUVoLi+5E6ae5FPiqHT58mAULFrBnzx6Sk5NRsj1dSpLEnj17iku+MoNx2TfIF05rxqwPPZ+/QugCgRdRK1XF2epW9FnyCHUnD19nj6v7GQw46zXD2bgNzsatUarX8V6tZ1kGvwBUvwBU79aLv6FRK4aR8eKH+HzwkiafVk6MxXfak2RMmIFSt0mu++fYI3Tw2LyVbxkhe7ce+exxsNvAYPRMcykhJVqgX8y2bdvo0qULv//+OxEREZw6dYqaNWtSuXJlzp49i5+fn7tS0I2EfDoaw+/facbst9+Fs2nbUpJIINCSvfhCTqiShLNWfWx9hpEx6T3S5v2GZdJ72Pvc7yoZKJollA/8AsiY+A6O1tpqQlJaCj6znkO3+58cd8upR6ijQQvsd5Z8j9DCogaHoGTp2iM57MhnXbUGJLP26Uy1xqEqxRthnhMFWolOmzaNyMhI1q5di9PppE6dOjz77LN07tyZbdu2cd999zFt2jRvyVo6OByYPp+lqd2qBIdgHTquFIUSCLQodZvgaNgS/aHd2vHwq37Nxtn8moLyjdGE5cnXMP3fBxjWLXcPSzYr5g9fxvrQc9o+s7n0CLU+Ujo9QouCUqu+JihOd+IQSlQDJJ0RyRSKao2/ukVFtcQi+Xq3UEeBlOju3buZOHEiwcHBXL7sCo3ONOe2b9+ekSNH8tZbb2lak5V3DCsXozut7YhhHTmhzFXzEAis415BWb6IlJgL+LXuhLNx69LrASnwPrIO68hnUYJDMWVpXyYpCuYv3sGanIi933CQpJx7hA4fX+qN5guDM6oh+ixds+SsflFzpSxK9GpLtLKkRCVJIijI9STr6+vyBSYmJrq316lTh88++yzHfcsj0oXTGH/9SjNmb98FZ6tbS0cggeA6qEEVsQ0fzxlRzOLmQZKwDxiJGlQR09fvI6nXYlRMP36OlJSA47benj1CW3XCcWvp9ggtLNnTcHRZKhfJPpVQkv9zvy4Jv2iB1vHVq1d317o1mUzUqFFDU/z9n3/+oWLFirntXr5QnJg/f0dTikwNCMI6/OlSFEogEAg8cXTph2X866jZKjwZ1/6Cz1tPat1RAcFYRz1fbotZOGvWR80iu3zxDGQWYMgWoVsSaS4FUqJdunTh119/Rb0aSj9y5EgWLVpE//796devH4sXL2bw4MFeEbSkMfz5C7pj/2nGrA88BYHBpSOQQCAQXAdn69vImPSuR2ej7DWJrQ89V747Gvn4omSLJtaddLWPyx5cVBJpLgVSos8//zxff/01DocDgGeeeYZXXnmFy5cvk5KSwgsvvMCLL77oFUFLGuOShZrXjhYdcXS4cXy9AoHgxkOp14yMlz5EqRCa43b7rWWnR2hRULLli2b6ReXsK9ESqFqUpxJ97rnn2L3bFfEXHBxMixYtSE1Nxel0IkkSzz77LBs3bmT9+vVMnjwZg+HG6GIi2Szu/6s+fq5gonJq/hAIBDcPStUoMl6Z67Fac/UIHV9KUhUvzlz8ojmV/lO9UKIyK3kq0S+++IJjx465XycmJlK7dm02bdrkVcHKEtb7HxfVVAQCQblBDYkg/aWPcDRx5bKr/oFYnngVspl6yyu5rUQlY0WQs/iFneng8G5jhULVefK2Zi9LOBq3xnH7XaUthkAgEBQM/0AsE99BiruIGhgMJp88dykvKFWjUA0Gt79XTopHSoyDimFIPpVQ085cm5txEZ3BeymJ5SvLtoRRjeZyHcUmEAgEaljlG0qBAqDXo9SopxmSr5a6lM0lG6ErlOh1sA1+RCSrCwQCQRnE0y961aTr4Rf1rhLNlzn31KlT7Nq1C4ArV1z97KKjo/H3z9m+3rp162ISr/Rw1m2CvfvA0hZDIBAIBDmg1NIqUflqcJFHSzQvR+jmS4nOmDGDGTNmaMYmTZrkMU9VVSRJ0lQxKq9YRk8qdzUlBQKB4GbBoy3aySOgKEjmMrYSnTt3rlcFKKuolW/uBuQCgUBQllEjqqD6+rt7o0oZaUiXziIHZs8VLWUlOmzYMK8KIBAIBAJBgZEkVzH6/3a4h3QnDqPc0lkzTbXGoCpOJFnnFTGEvVIgEAgE5ZLsxejlE4eQdGYkY5ayhqqCao3zmgxCiQoEAoGgXOLhF82M0DVnDy7ynklXKFGBQCAQlEuUWvU1r+Uzx8Bu80xzsXgvQlcoUYFAIBCUS9TgEJSQa51bJKcD+eyJHNJcxEpUIBAIBAIPcmrSLWWrWuTNNBehRAUCgUBQbsnuF5VPHC7RggtCiQoEAoGg3JLdL6o7cQgpW19RxRLjtfMLJSoQCASCcouzZn3ULE1C5ItnkJxGkLL0trYne+38QokKBAKBoPzi4+vRgFx/6hiSObxETi+UqEAgEAjKNTk16c7uF/UWQokKBAKBoFzj2RbN0y/qLYQSFQgEAkG5RqxEc2HGjBkEBwdr/urVu9bNXFVVZsyYQYMGDahUqRJ9+vTh0KFDmmNYrVYmTpxIVFQUkZGRDB06lPPnz5f0WxEIBAKBl1CqRqEargUSyUnxyA7fEjl3mVaiAHXr1uXIkSPuv3/++ce9bc6cOcydO5eZM2fy119/ERYWxsCBA0lJSXHPmTJlCsuXL+fzzz9nxYoVpKSkMGTIEJxOZ2m8HYFAIBAUN3o9So16miFdfFqJnLrMK1G9Xk9ERIT7LzQ0FHCtQufPn88zzzzD3XffTaNGjZg/fz6pqaksXboUgOTkZL755hveeOMNunTpQosWLfjkk084cOAA69evL8V3JRAIBNdYeiKdoX8m8OVZPTanWtrilEuy+0UNZ7zXuSUrZV6Jnjp1ioYNG9KsWTMefvhhTp06BcDp06eJiYmha9eu7rk+Pj507NiRbdu2AbBnzx7sdrtmTtWqValfv757jkAgEJQm/3c0jTEbLrPqrIV5p40M/TOBVLtS2mKVO7L7RXXHj4E+wOvnzbMpd2nSpk0b5s2bR926dYmPj+edd96hR48ebN26lZgYVwWKsLAwzT5hYWFcvOgq8RQbG4tOpyMkJMRjTmxs7HXPHR0dXYzvRJAdcX29i7i+5YNdyTIT/jMB14oF/HXBSu9fz/F+IytBhtz3FWgxyWYaZXktHT+ErWNVjKTkuk9xUKaV6J133ql53aZNG1q0aMF3331H27ZtAZCyVKoAl5k3+1h28jOnbt26hZBYkB+io6PF9fUi4vqWD06lOHhxRxxO1XPVuT9Fx/gjgfzYI5RIP10pSFcOUeugfuWPlJ4KgM6aga85HIf9rFdPW+bNuVnx9/enQYMGnDhxgogIV/ub7CvK+Ph49+o0PDwcp9NJQkJCrnMEAoGgpLliU7j/zwQSrbmbbQ8lOei1Io7jyY4SlKwcI0meTbrTvK/iypUStVgsREdHExERQY0aNYiIiGDdunWa7Vu2bKF9+/YAtGjRAoPBoJlz/vx5jhw54p4jEAgEJYlTUXlkQyKHkrTK8ekm/rQK1GYNnEl10mtFHPsSbCUpYrnFoy1aQrrXz1mmlejLL7/Mpk2bOHXqFDt37mTkyJGkp6dz//33I0kS48aN44MPPmDZsmUcPHiQxx9/HD8/P+69914AgoKCGDFiBFOnTmX9+vXs3buXRx99lMaNG3PHHXeU7psTCAQ3Ja/vusLqc1bN2MCaPrzWJpAPm1jpXc2s2RZnUei7Mp5/Lmn3EXiSfSWqPxvv9XOWaZ/ohQsXGDNmDAkJCYSGhtKmTRv++OMPqlevDsDTTz9NRkYGEydOJCkpidatW/PTTz8REHAtImv69OnodDpGjRqFxWLh9ttvZ8GCBeh0ws8gKB2sTpXFx9MxyhL3RPlgkK/vnxfcOCyKTuPD/1I1Yy1CDMy9LRhJkjDJ8E3XiozfnMT3x66toq7YVQatieerLhXpVc2npMUuN2Rvi2Y4cR6aeVfNSUlJSSIpSVCi3MyBL1anSv9V8WyLdZnnbokwsrh7CIHG4jMK3czXtyyzNcZK/1Xx2LK4QSv5yPzVL9wdPJT52Smqyss7kpl3QFswQCfBvNsqMKR2yVTjKY/4PjsEOcGVvaFKEPugL6Dg13WVV85Xps25AsGNxpRtyW4FCrAlxsagNfEkXSfARFD+OZPqYPhfiRoFatbBom4hOUbfypLEW22DeKVVoGbcqcKjf19mwcFUj30ELrL6RSUVZNXPq+cTSlQgKCG+P5bOF0c8S5HtjLMzYHU8l4UivSFJtbsiceMt2s/341sr0DrMmOt+kiTxXPMA3r8lmOwG/xe2JTN99xVUVRgSs5PdLypneNd1J5SoQFAC7E+0M+Gfy7lu35Ngp+/KOOItoqbzjYSiqjz692UOXNZG4j7fLIB7o/Jnkh3VwI8v7qiAIdvdetaeFCZtTUYRilRD9vJ/+kSLV88nlKhA4GWSrAoP/pVAVv1o1kHLUG05mgOXHfRdGU9MulCkNwpv/XuF389ob+J9q5t5sVXBytENrOXL4u4h+Oq1a9KFh9MY+/dlUW83C0qNeqhZiunoY7xbsUgoUYHAiyiqyuObLnMyRasY37slmN96hXJbJa0573CSgz4r47mQJhRpeed/x9N5b5/Wd9mkooFPbq+AnEfFtJzoWsXMrz1DCTZq9116IoNhaxNIE/V2Xfj4okTWcL/UpXr3AUMoUYHAi3y4P5UV2VYiD9Xz5YG6fvgZZBbfGULXSJNm+7ErDvqsjONsqqhUU17ZGWdj/Gat+T7cR+b7bhXxy26XLQBtw42svCuMyr7aY/x53sqgNQkiQO0qWYvR61KEEhXcACRZFV7anky7n2J47aiR2Iwbf6W14YKVN/69ohlrEWLg7fbB7te+epnvuoXQs6pWkZ5McXLXynhOpQhFWt44l+rggbUJWLN8xY0yfNu1ItX8i56z2LCCgVV3hREVoA2Y2RZr464VcVwS7gCNX1SsRAXlGlVV+eFYOm1/imHugVSOJjv4PVZP99/iOJJkL23xvMaFNCejNySiZPn9VjBJfN2lIuZsfi2zXuKbriH0ra6tVHM21UmfFfGidmo5Is2uMGxtIjEZ2hXhh50q0C7clMteBadGgJ5VfcJoWlHrVz+Y5KDn73GcvHJzf2eyrkQlK/jvyz0KuqgIJVqO2RFr48P9KWyPLZvlwI4k2em3Kp7HNl4mLlt4/5lUJz1+j2PjxbIpe1GwOVUeWpeoSWmQgIW3V6RGQM4rEaNO4ssuFRlUS1uN5ny6k7tWlu4Dh6qq7Euw8dd5CxaHCGDJjUz/975E7Wf1TFN/htYp/uII4T46fusdyi0RWgVx+mq93f8Sb9yH1LxQqkahGlwPGBLgt/vK9XcoAkKJllPe25vCnb/HMXXnFXr8Hs/dq+LZGlM2FFK6Q+GNXcnc+mssmy7lXjg72eYqZbb4uPeLRJckr+xIZnuc9n1PbhFA96rmXPZwYZAlPr29AkNqaxVpTIZCn5XxHCiFm+I/l6z0XRXP7cviGLQmgbY/x7D0RLrIT8yBmXtS+PWU1v/dq5rZo2BCcRJklPmpRyg9s9XbjclQuGtlXJm5J5Q4ej1KjXolciqhRMsZqqry+s5k3szma9tw0UqvFfEMXB1fqivTlWcyaP9zLLP3pZI9WNCkg9sra01adsVVgWXWnhsjcfzHE+l8ckhbUKF7FROTWuQvpUEvS8y7tQLD62pXLvEWhX6r4tlbQt08dsXZGLQ6nrtWxrM5y4PQ2VQnYzZc5s7f49h2s96gc+Dnk+nM3KNNpWgUrGdh5wrovFwb2Ucv8W3XityX7eHrik1l4OoE1pz1bp5kWSV7vqi3EEq0HKGoKpO2JvP+/txLfq27YKXH7/HcsyaenXEl1z7pTKqD+/9M4P61iZxN9Qxs6FbFxJYBEfzaM4Qna3rKNX13Ck9sSirX+W6Hk+w8tTlJM1bNX8enBUxp0MkSH3YK5uH62nJliVaF/qvi2eXFz3Vfgo2hfybQ7bc4/rqQu5LcGWen54p4HlqXeNMHP+2OtzFuozYSN8Qk8333EAKKEIlbEAyyxILbKvBYI+13JsOpMmxtAt8cTcNajn9bhUHJVrnIW4gC9OUEh6Ly1OYkvjumNX3qJbiem6pHVRMvtAik1XXKixUFm1Nl3oFUZu1NIT0HQSr7ysxoF8zdNc1IVxVJdHQ0+3VVeGzjZU0tUYDOlU183aUiwaby9XyXYlfoujyO6CxBQEYZVvcJo2Vo4a69qqq8sC3ZY2UbYJBYemcI7SNyDlQpTAH6w0l2Zuy+4mGOzIosoQmUysQow6ON/HmuWUC5+9yKysV0J12Xx3Ix/doX2SDDrz1D6Vip4IFERW0eoKoq7+5N4a3dngUGjDI0DzHQNtxIuzATbcONVMmhbu+NghRzDr9Jw92vU79e753zCCVa9rE5Vcb+fZlfTmVoxiuaZH7qEUKqQ2XG7isas1t2elYzM6VFAC0KeUPPiU2XrDy/JYnDSZ4rEVmCRxv6MaVloEeHkswbxZYYK8PWJnDZqv0KNgzWs/jOEKoXQzpASaCqKg+tT/RQQB90DOah+kUrfq2qKq/uvOLRPstPL7H4zhBuzeFGXZAb8fFkBzP3XGHJiQxyuxF0qmTk5VaBRPjoeHVnMstP56xoK5pkXmgRwKgGfjdFe7cMh0qflXH8G6/1VX/UKZgR9Qr3uRdXB57PD6fy/JbkXD/TTCJ9ZdqGG2kbZqRduJHmIUZMuhvks1NV/J7oj5TmeqAQSvQmJcOh8tC6BI8mvhE+Mr/0DKVhhWsh7n9ftDJj9xW2xOSuTHtXM/NCywCahxRemcZlOHllRzI/HM/IcXvbMAPv3RJMs1zOkfVGcSzZzuA/Ejwq+kT4yCzuHlKsSt9bzD2QykvbkzVjw+r4MvfWYPfquyioqspbu1N4d692deGjk/i+e0XuiNQGleTnRnwm1cE7e1L47lg6uVn52oYZeLlVILdXNmnex+ZLVl7ansyehJwDneoG6XmzbSA9q5qL5f2XRVRVZcyGy/x4UvsbeKKxP2+1Cyr0cYuzjd2PJ9J59O/L17VUZSfrarVtmOuvajl5mM0J8zsT0f+3AxBK9KYks/vDxmwrzKp+Opb1CiUq0PPLrarqVWWawtbY3JVpn+pmXmgZ6JFndj0UVeXrI+m8viuZJJvn1ybYKPF6myBG1PO9rg8w+40i3uJk2J+JHhGtvnqJzztXoHf1stuE+J9LVvqtitcooiYVDazpE4qvvnhNm7P2XGF6NjOdSQffdg3hziyRv9e7EV9IczJ7XwpfH03zCPzKpFlFl/K8s6opVyWoqCpLTmTwxs4rnM8luf/2yiamtQ3M9WGqPPPu3hSmZQvuu7OKiR+6hxQpkKi4e8Huibcx90AqW2NtOcYq5IfyvFo1/vg5xmXfAEKJ3nQkWRUG/xHPjjjt037tQB2/9AzNs/KJqqqsu+BamWY/Rlb61TDzQotAGuehTPcm2Hj2nyR2xed8rAfq+vJ6m0BCzXn7WHK6UWQ4VB7b6GkSlSWY2T6IRxr653nckiYm3cnty2I1ifWBRokN/cKplcMDTnEwZ38Kr+7U3ryNMnzVpSJ3XX3YyOn6xmU4eX9/Cp8fTtNU0slKw2A9L7YKpG/1/K8g0x0Kc/9L5YP9qaTlsOSRgGF1fXm5VSCVfW8M/9uyUxk8uC5RM1Y/SM+avmEEFbG5ujcbql9Md7Ij1saOOBs7Ym3sTrDl+l24Hpmr1TZhRhpWMBDuIxNu1hHmIxNm1nkUEylNdLv/weeDFwGhRG8q4i1OBq5OYH+2vMBGwXp+7hlKRAFuRqqqsva8S5nmpgAB7q5pZnKLQBpV0CrTZJvC9H+vsPBwWo5BJY2C9bzXMZhbcglyyYncbhSKqvJaDv4/cJnJ3mwbWKjC3d7Aoaj0XxXPP9lM5993q+j1lfO8A6m8mM18rJfg8zsqcndNH831vWxV+Oi/FBYcTMsx8AugTqCeF1oGMLCmT6FXUTHpTt7afYVvo9Nz/J746iWeauLP+Cb+RaodWxqoqopdgXSHyuEkO4PWJGiuZQWTxF99i+fByZtKNDs2p8r+RDvbMxVrXOFXq1kJNEiE+ciE++gIM8uEXf033CdT0V77v79e8qrJX0pKwO/pewChRG8aLqQ5GbA6nqPZSr21DDXw450hVMzHSi8nVFXlj3NWZuy5wu5clKkEDKjpw+SWAdQP0vPTyQxe2p7MpQxPu5+fXuKFFgE81ti/wEEked0oPj+cysStyR434341zHxye4ViN5MWhld2JPNRNmX/XDN/XmldeH9YQfj8cCrPbdEqUp0EC26rQAvlPOE1ajP/QCrzDqRyxZ7zT7y6v47JLQIYUtsXfTEFAv2XaOflHcmszyU9prKvzMutArm/zvVN/oXFqajEWRQupjuJy1DIcKqkO1QyHCrpDoUMh0qG0/U6w6GSnvX/WbZl7pM5J6cHA3A9vPzcM5TbKhdPSb+SVKI5UVyr1fzio5MI9ZEJv6psw68q2YYVDPSt7lMsq1rfZ4cgJ8QIJVrSbL5kpVMhQtSLwqkUB3eviud0tqfBWyKMLO4e4hHlWhhUVWX1OQtv707JNTBEAuoH63OMugVXP8S32wcVOuAgPzeKNWctjFqf6GEibBNm4PtuIYT5lJ5pMCdzXufKJn7qUTR/WEH5v6NpPL05SROBKQH9IxxsuGzI0W8NLh/XxOaBPFDXF6MXfFuZD2yv7EjmSC51f5tVNDCtXZBH8Y3rkWp3KccLaQqXMpxcTHNyId3Jxcy/q+MlmQ5ZHBHYWSltJZqd7KvV7bE2zpVQm77KvjJPNw1gZD0/fIqgTM0fv4p+xwahREua4C/Pc0uEkeeaBdCtSu4BFsXF0SQ7A1bHcyFdu+rrGmnim65Fa5+UE6qqsvKsS5lmr/WZG9X9dbzTIdijxFhBye+NYm+CjSF/JHishGv461hyZwj1gvMfFFVcRCfb6bo8jpQsq7tIX5kN/cNLRbH/cCydxzddznWllJVwH5lnmwXwUD2/EvFbORSVr4+mMf3fFBJyadHVu5qZ19oEEmSUryrIa0rxQrpyVTm6Xue2oi4txjb0Y1aH4GI9ZllTojmRuVrdHW/jwtUVf6xFIS7DSbxFKfaHmEo+Mk81DWBU/cIpU8OKHzAtXiCUaEkT/OV59/9bhBh4tlkAfWuYvWKC2p9oZ+DqeE3BcnBF0H5xR0WvRsKpqsrvZyy8vScl14LVBhmebhLAs839i8WUWpAbxblUB/f9kcDBbKviYKPEom4hJWotSLMrdP8tjkNZZDHIsKJ3GG3DSy8C9acT6Tzy9+Vcb14VTTLPNPVndAO/UvFHJtsU3t+XwrwDqR7FNcoLOsnlwvDRSwQYZPrVMPNSq8BiM4NnUh6U6PVQVJXLVoXYDNdfnMWlZOMsTtfrDOdVhesaK4ipONxH5qkm/jzcwK9A9yH58B58ZzwjlGhJk1WJZtIgWM+EZgHcU8un2H48O+Ns3LMmnuRsprfBUT7Mu61CiSWtK6rKb6ctvL3nCgcvX1MSt1Uy8t4twcW66ivojSLZpvDQukTWZfOzGWWYe2sFBtcu/g4Z2VFVV8GLJSe0eYGz2gcxtlHpRw4vO5XBw+sTNTmBgUaJJxv781gj/2JxBRSVUykO3th1hZ9O5pxfXFxUMElU9tVRyUeHv8Gl+Hz1Emad618fvewa07m2+eglfHTX5rn/1UmYr/6/pH6H5V2JFgRVVbliV4nLcBJnUdxK9nCSg0XR6WTk8lQYZr6mTPP1UGhJx+/pe0n7ZEUxvwMXQonmQk5KNJOaATqeaRrA/XV8i7RK3HjRyv1/JpCaze83sp4vs28JLlH/WiaKqrLyjIWtsTZuiTDSu1rxJ8wX5kZhV1Qm/JPEt9GeHV9ebhXIc838vWpyX3jIFeyUlcFRPnx6e4UyU1Dgr/MWpmxLJsViY1j9IJ5s4l8my/Btj3UVa7he6lVOGGWo5Ksj0lfnUpK+suv/fq7Xkb46KvnqiuQ/K21uJiV6PWIznHz0XyqfH849qjzULDO+icvC4p+XMlUUkL3zWxBKNBd2x9t4b28Kv53JvZZoZV+ZJ5sE8FA93wKbydactfDgugQs2cwZjzf24622QWXmxuwNCnujUFWV9/aleiS5Awyv68v7HYO9smLYEWvjrpVxmuIEDYP1/Nk3rEyma5SHG7Gqqvx8MoPZ+1M5eNlOkFFyK8LKVxWj+/++MpF+Oiqa5DKT4uQtysNnV5LEZTj5+L9UPjuclmMeMrjcFU828eeRhn4lVvA/K0KJ5sGhy3be35fC0pMZuQZvhJhkxjX2Z0wDv3w9+f96KoMxGxI9KsZMahHAlBYBN7QChaLfKJYcT+eJTZ7F65tWNNCkooEQk0yI+eqfSSb06v9DzToCjVKBbsTxFiedf43TVOUJMEj81S+MukElH9iUH8rbjVhR1RteOeaX8vbZlRTxFidz/0tl4aE0D8tdJhVMEk80DmBsQ78SdV8IJZpPTl5x8MF+V63R3MqlBRokHmnox7jG/rlW7vn+mEsBZFfIb7QJ5Kmm+es5Wd4pjhvF5ktWHlibkGsaR27oJNeTa6hZpqL5qoI16bL8/9q2EJPME5uS2HBR64v9uourqEFZRdyIyy/is7s+CRYn8w6k8umhNE2EfFaCjRKPN/bn0Ub+Ra4glR+EEi0g59OcfPRfCl8fyd3x7auXGFnPl/FNAojM0moopwR5gHc7BDGmDJa18xbFdaOITrZz75oEj7xab/JkY3+mFaHAeEkgbsTlF/HZ5Y/LVoW5B1L59GDuxUSCjBLjGrkC67wZGyCUaCGJy3Ay/2Aqnx1Ky/VDNMqubh5PNw1g+ekMpmareSpL8HGnYIbVLb5k7fJAcd4o4jKcPLw+0aNIvzfoGGFkWa/QYk9rKG7Ejbj8Ij67gpFkVZh3MJUFB1O5kotVKtAo8Vgjf15sGegVGYQSLSJJVoWFh1KZfzCNxFwSynNqZmyQ4bPOZdss6C28caM4kGjnVIqDBKtCgkUh3qKQYHGSaM38v+svN39KXkT4uAoqVCoHRdTFjbj8Ij67wpFkVVhwMJX5B1M90gXdc0ZV8cq5y2+juDJCsElmYotAxjX256sjaXz8X6pHhZ3sCtSsg//rEkKPIlb+EVyjcUVDnp1oACwO9apizaZgrdcUbbzFSeLVsctWhdqBeubfVqFcKFCB4GYk2CTzQkvXffiTg66a0QWNlygsQokWE/4GV7rLmAb+fHcsnQ/2p3AmB1+dn17i++4hBaoZKig+zHqJSL1O46sWCAQ3BkFGmUktAnmskT+fHkpj7oEULlu9q0zLXpJbOcesl3i4gR+77olg/m0VqBd07TklyCjxS89QoUAFAoHAiwQaZZ5vHsC+wZWY2jqQil4MLLqplOhnn31Gs2bNiIiIoHPnzvzzzz9eO5dBlri/ji9bB4bzU48QZt8SzK57Ikq1xqpAIBDcTAQYXE0X9g2O8No5bhol+tNPP/HCCy/w3HPP8ffff9OuXTsGDx7M2bNnvXpeWZLoWsXMww38cs0dFQgEAoH3yLMsYBG4aZTo3LlzGTZsGCNHjqR+/fq88847RERE8MUXX5S2aAKBQCAop9wUStRms7Fnzx66du2qGe/atSvbtm0rJakEAoFAUN65KaJzExIScDqdhIWFacbDwsKIjY3NcZ/o6OiSEO2mRVxf7yKub/lFfHbewVv5tzeFEs0ke2F3VVVzLfYuEp69h0go9y7i+pZfxGdX/rgpzLkhISHodDqPVWd8fLzH6lQgEAgEgvxyUyhRo9FIixYtWLdunWZ83bp1tG/fvpSkEggEAkF556Yx5z7xxBM8+uijtG7dmvbt2/PFF19w6dIlRo0aVdqi3XQIc5V3Ede3/CI+u/LHTaNEBw0aRGJiIu+88w4xMTE0bNiQ//3vf1SvXr20RRMIBAJBOUV0cREIBAKBoJDcFD5RgUAgEAi8gVCiAoFAIBAUEqFEBaVO06ZN+eijj0pbDIFAICgwN5USHTduHEOGDCltMW5Ixo0bR3BwsMffvn37Slu0ck/mtR0/frzHtqlTpxIcHCy+1+WAvXv3UrFiRXr27FnaotwQlJXfxU2lRAXe5Y477uDIkSOav0aNGpW2WDcEVatW5eeffyYtLc095nA4WLx4MVWrVi3SsW02W1HFE+SD//u//2P06NEcOnSII0eOFPl4dru9GKQq33jzd5Ffblol+u+//zJw4ECioqKoVq0avXr1Yvv27Zo5wcHBfPXVV4wcOZLIyEiaN2/O4sWLS0niso/JZCIiIkLzp9frWblyJZ07dyYiIoJmzZrx5ptvety4U1NTGTt2LFWqVKFevXrCvJuNxo0bExUVxc8//+weW716NSaTiVtvvdU9lt/v9cKFCxk+fDiRkZG88cYbJfY+blYyMjJYsmQJI0eOpH///nzzzTfubadPnyY4OJglS5bQq1cvIiIiaNu2LX/99Zd7zsaNGwkODmbNmjV07dqVsLAw1q5dWxpvpUxRXL+LJ554wmPVqigKTZo04eOPP76uDDetEk1JSWHIkCGsXLmStWvX0rRpUwYPHkxCQoJm3qxZs7jrrrvYtGkTgwYN4sknn+TMmTOlJHX5Y+3atYwdO5ZHHnmErVu38vHHH/Prr7963LjnzZtHvXr12LBhA1OmTOGNN95g2bJlpSR12WTEiBEsWrTI/frbb7/lgQce0NR/zu/3eubMmfTo0YN//vmHMWPGlNh7uFn59ddfqVatGk2aNGHIkCH88MMPHivJV199lUcffZSNGzdyxx13MGzYMC5cuKCZ89prr/Hyyy+zY8cO2rRpU5JvocxSHL+LkSNH8ueff3Lp0iX3PuvWrSMmJoahQ4de9/w3rRLt3LkzQ4cOpX79+tSrV49Zs2ZhNpv5888/NfOGDBnCkCFDiIqK4qWXXkKv17Nly5ZSkrps8+eff1KlShX337333su7777L+PHjGT58OLVq1eL222/ntdde48svv0RVr6Uot27dmueff546deowatQohg4dyrx580rx3ZQ9Bg8ezO7duzl+/DgxMTGsXbuWYcOGaebk93s9cOBAHnzwQWrWrEnNmjVL8F3cnPzf//2f+2Z866234uPjw4oVK/6/vXsNafLt4wD+XWkeZjUzDyWbmrrUCgkPgXn2lai5kYcosTAiFCoCaeoLlU5qmCK0hMoQnVhSvlAIDMwgRQWzEkw7IIRBbDY08tDJ+X8hz57W6tH/HvOwfT+v3HVf3tdv7r783ffu674ugzpZWVmQy+WQSqUoKyuDu7u70XrHCoUCsbGx8PT0xNatW5ct/tVsKfpFaGgopFIpGhsb9b+jUqkQHx+/4N/ZYmYs+tXY2BguXbqEJ0+eYGxsDLOzs5iZmcH79+8N6u3atUv/s5WVFZycnDA2Nrbc4a4JYWFhqKqq0r+2tbVFcHAw+vv7Dcp1Oh1mZmagVqvh5uYGAAgJCTHYV0hICFpbW5cn8DVCJBIhMTERKpUKmzdvRnh4OMRisUGdxR7Xe/fuXc7QLdrIyAh6e3tRU1MDYH41qbS0NNTX1yM5OVlf7+c+sG7dOgQFBWF4eNhgX/zcjC1Vv8jMzERNTQ3Onj2L8fFxPHjwACqVasH2LTaJZmdnQ6PR4PLly5BIJLCxscGBAweM7tVZW1sbvBYIBAZXUPRf9vb22LFjh0GZTqeDQqGATCYzqs8z6X8vIyMD2dnZEAqFKCgoMNq+2ONaKBQuV8gWr66uDrOzs9i9e7e+7D//Q349uVkIP7ffW4p+cejQIRQXF6O7uxsDAwNwcnJCbGzsgm1bbBLt6elBaWmpfri5RqOBWq1e4ajMT2BgIF6/fm2UXH/V19dn9Hrnzp1/M7Q1KSoqCtbW1tBqtUhISDDazuN6dfnx4wcaGxtRVFRk9GjLyZMn0dDQoP+at6+vD1FRUQDmk2x/f7/BlSr92VL0C0dHRyQlJUGlUmFgYACHDx/G+vXrF2zbYpOot7c3mpqaEBwcjOnpaRQWFmLDhg0rHZbZOXfuHNLT0yEWiyGXy2FlZYWhoSE8ffrUYHBRX18fKioqkJycjM7OTty5cwc3b95cwchXJ4FAgK6uLszNzcHGxsZoO4/r1aWtrQ1arRZHjx7Fli1bDLYdPHgQNTU1+lGht2/fho+PDwICAnDr1i2Mjo4iKytrJcJec5aqX2RmZiIlJQXfv39HXV3dotq2qIFFOp1Of2Zx7do1TE1NITo6GllZWcjIyOCKLn9BXFwcmpqa0NnZibi4OMTFxaGystLoGa6cnBwMDg4iMjISFy9eREFBAc/C/2Djxo3YtGnTb7fxuF5d6uvrERERYZRAAUAmk2F0dBSPHz8GMD86V6lUIjw8HO3t7VCpVHB3d1/miNeupegXERER2L59O8LDw+Hl5bWodi1qFRe5XA4vLy9UVFSsdChERADmnxMNDAxER0cHBw6tsJmZGfj7++PKlStIS0tb1O9YxNe5Wq0WPT096Orq4iLcRERkQKfTQaPR4Pr167Czs/vtQMg/sYgkeuzYMYyMjOD06dNISkpa6XCIiGgVGR0dRWBgINzd3aFUKv/VOAKL+jqXiIhoKVnUwCIiIqKlxCRKRERkIrNKohUVFYiJiYFYLIa3tzfS09Px8uVLgzpzc3MoKSmBn58f3NzckJCQgKGhIYM6tbW1SExMhEQigUgkwrt374zaev78OWQyGSQSCby8vHDmzBlMTk7+1fdHRESri1kl0c7OThw/fhxtbW1oaWmBlZUVZDIZxsfH9XWqqqqgVCpRVlaGR48ewdnZGXK5HJ8/f9bXmZ6eRmxsLPLy8n7bzocPHyCTyeDp6Yn29nbcv38fw8PDyMnJ+evvkYiIVg+zHlg0OTkJiUSChoYGxMfHY25uDn5+fjhx4gRyc3MBzD8X5OvriwsXLhg9/vLs2TPExMTgxYsX8PDw0JfX1tbi/PnzePPmjX7yhsHBQezfvx/9/f0LTnFHRETmwayuRH81OTkJnU4HkUgEYP6hZrVabTCpsJ2dHcLCwtDb27vo/X79+hXW1tYG8yra2dkBAJdJIyKyIGadRPPy8rBnzx6EhoYCgH7CYWdnZ4N6zs7O0Gg0i95vZGQktFotKisr8e3bN0xMTKC4uNigDSIiMn9mm0QLCgrQ09OD+vp6o5n4f17xHJgfbPRr2f/i7++P6upqVFdXY9u2bZBKpfDw8ICLi8uiZv0nIiLzYJYzFuXn56O5uRmtra3w9PTUl7u6ugKYXwbn5wnQP378aHR1upDU1FSkpqZCo9HA3t4eAoEASqXS4N4pERGZN7O7ElUoFLh37x5aWloglUoNtnl4eMDV1RUdHR36si9fvqC7uxv79u0zqT0XFxc4ODigubkZtra2iI6O/n/CJyKiNcSsrkRzc3Nx9+5dqFQqiEQi/f1JoVAIBwcHCAQCZGdn4+rVq/D19YWPjw/Ky8shFAqRkpKi349arYZarcbbt28BAK9evcKnT58gFovh6OgIALhx4wZCQ0Ph4OCAjo4OFBYWoqioSD+IiYiIzJ9ZPeLypwSmUCiQn58PYP7+Z2lpKWprazExMYGgoCCUl5cjICBAX7+kpARlZWVG+1EqlThy5AiA+VXpHz58iKmpKfj6+uLUqVP6FeqJiMgymFUSJSIiWk5md0+UiIhouTCJEhERmYhJlIiIyERMokRERCZiEiUiIjIRkygREZGJmESJiIhMxCRKRERkIiZRIiIiE/0DJVvzWaKBrogAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 8. Using the object-oriented interface method, plot the resample DataFrame using the df.plot() function. \n",
    "\n",
    "# Import the style from Matplotlib.\n",
    "from matplotlib import style\n",
    "# Use the graph style fivethirtyeight.\n",
    "style.use('fivethirtyeight')\n",
    "\n",
    "df.plot()\n",
    "plt.title('Total Fare by City Type')\n",
    "plt.xlabel(None)\n",
    "plt.ylabel('Fare ($USD)')\n",
    "plt.savefig(image_to_save, bbox_inches=\"tight\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "PythonData",
   "language": "python",
   "name": "pythondata"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
